{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\DJsimon93\\\\Desktop\\\\IPL\\\\bloc 3\\\\PFE\\\\PFE\\\\Web_app\\\\src\\\\components\\\\ListQRCodes\\\\ListQRCodes.js\";\n\nimport React, { useState, useEffect } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Service from \"../../services/Service\";\nimport { Card, Button, DataTable } from \"react-native-paper\";\n\nvar ListQRCodes = function ListQRCodes(_ref) {\n  var data = _ref.data;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      codes = _useState2[0],\n      setCodes = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      currentPage = _useState4[0],\n      setCurrentPage = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      load = _useState6[0],\n      setLoad = _useState6[1];\n\n  if (!load) {\n    data.map(function (code, index) {\n      var temp = React.createElement(DataTable.Row, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 14,\n          columnNumber: 13\n        }\n      }, React.createElement(DataTable.Cell, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 17\n        }\n      }, React.createElement(Image, {\n        style: styles.image,\n        source: code.image,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 33\n        }\n      })), React.createElement(DataTable.Cell, {\n        numeric: true,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 17\n        }\n      }, code.count));\n      setCodes([].concat(_toConsumableArray(codes), [temp]));\n    });\n    setLoad(true);\n  }\n\n  return React.createElement(Card.Content, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }\n  }, React.createElement(DataTable, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 11\n    }\n  }, React.createElement(DataTable.Header, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }\n  }, React.createElement(DataTable.Title, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 15\n    }\n  }, \"QR Code\"), React.createElement(DataTable.Title, {\n    numeric: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 15\n    }\n  }, \"nbr of scans\")), codes[currentPage], React.createElement(DataTable.Pagination, {\n    page: 1,\n    numberOfPages: codes.length,\n    onPageChange: function onPageChange(page) {\n      console.log(page);\n      setCurrentPage(page);\n    },\n    label: 1 + \" of \" + codes.length,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 11\n    }\n  })));\n};\n\nvar styles = StyleSheet.create({\n  cardContainer: {\n    marginLeft: \"auto\",\n    marginRight: \"auto\",\n    paddingTop: \"80px\",\n    paddingBottom: \"80px\",\n    borderColor: \"#D3D3D3\",\n    borderWidth: \"1px\",\n    borderRadius: \"10px\"\n  },\n  downloadButton: {},\n  image: {\n    display: \"block\",\n    height: \"100\",\n    width: \"100\",\n    marginLeft: \"auto\",\n    marginRight: \"auto\",\n    padding: 40,\n    backgroundColor: \"red\",\n    objectFit: \"cover\"\n  }\n});\nexport default ListQRCodes;","map":{"version":3,"sources":["C:/Users/DJsimon93/Desktop/IPL/bloc 3/PFE/PFE/Web_app/src/components/ListQRCodes/ListQRCodes.js"],"names":["React","useState","useEffect","Service","Card","Button","DataTable","ListQRCodes","data","codes","setCodes","currentPage","setCurrentPage","load","setLoad","map","code","index","temp","styles","image","count","length","page","console","log","StyleSheet","create","cardContainer","marginLeft","marginRight","paddingTop","paddingBottom","borderColor","borderWidth","borderRadius","downloadButton","display","height","width","padding","backgroundColor","objectFit"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { StyleSheet, View, Image,Text } from \"react-native\";\r\nimport Service from \"services/Service\";\r\nimport { Card, Button,DataTable } from \"react-native-paper\";\r\n\r\nconst ListQRCodes = ({data}) => {\r\n    const [codes, setCodes] = useState([]);\r\n    const [currentPage,setCurrentPage] = useState(0)\r\n    const [load,setLoad]=useState(false)\r\n    \r\n    if(!load){\r\n        data.map((code,index) => {\r\n            const temp = (\r\n            <DataTable.Row>\r\n                <DataTable.Cell><Image style={styles.image} source={code.image} /></DataTable.Cell>\r\n                <DataTable.Cell numeric>{code.count}</DataTable.Cell>\r\n              </DataTable.Row>)\r\n            setCodes([...codes,temp]) \r\n          });\r\n        setLoad(true);\r\n    }\r\n    \r\n    return (\r\n        <Card.Content>\r\n          <DataTable>\r\n            <DataTable.Header>\r\n              <DataTable.Title>QR Code</DataTable.Title>\r\n              <DataTable.Title numeric>nbr of scans</DataTable.Title>\r\n            </DataTable.Header>\r\n\r\n          {codes[currentPage]}\r\n\r\n          <DataTable.Pagination\r\n              page={1}\r\n              numberOfPages={codes.length}\r\n              onPageChange={page => {\r\n                console.log(page);\r\n                setCurrentPage(page)\r\n              }}\r\n              label={`${1} of ${codes.length}`}\r\n            />\r\n          </DataTable>\r\n          \r\n        </Card.Content>   \r\n    );\r\n  };\r\n\r\n\r\n\r\nconst styles = StyleSheet.create({\r\n    cardContainer: {\r\n      marginLeft: \"auto\",\r\n      marginRight: \"auto\",\r\n      paddingTop: \"80px\",\r\n      paddingBottom: \"80px\",\r\n      borderColor: \"#D3D3D3\",\r\n      borderWidth: \"1px\",\r\n      borderRadius: \"10px\",\r\n    },\r\n    downloadButton: {},\r\n    image: {\r\n        display: \"block\",\r\n        height:\"100\",\r\n        width: \"100\",\r\n        marginLeft: \"auto\",\r\n        marginRight: \"auto\",\r\n        padding: 40,\r\n        backgroundColor: \"red\",\r\n        objectFit: \"cover\",\r\n      }\r\n  });\r\n  \r\n  export default ListQRCodes;\r\n  "]},"metadata":{},"sourceType":"module"}
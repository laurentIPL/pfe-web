{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\DJsimon93\\\\Desktop\\\\IPL\\\\bloc 3\\\\PFE\\\\PFE\\\\Web_app\\\\src\\\\components\\\\CreateQRCodeContainer\\\\CreateQRCodeContainer.js\";\n\nimport React, { useState, useEffect } from \"react\";\nimport AskQRCodeForm from \"./AskQRCodeForm\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Service from \"../../services/Service\";\nimport { PDFDownloadLink } from \"@react-pdf/renderer\";\nimport PDFDocument from \"./PDFDocument\";\nimport { Card, ActivityIndicator, Button } from \"react-native-paper\";\n\nvar CreateQRCodeContainer = function CreateQRCodeContainer() {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      images = _useState2[0],\n      setImages = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      showDownloadLink = _useState4[0],\n      setShowDownloadLink = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      charging = _useState6[0],\n      setCharging = _useState6[1];\n\n  var handleFormSubmit = function handleFormSubmit(data) {\n    setShowDownloadLink(false);\n    setCharging(true);\n    Service.askForQR(data).then(function (resp) {\n      console.log(resp.data);\n      var images = [];\n\n      for (var i = 0; i < image.length; i++) {\n        var _image = resp.data.data[i].image;\n        var name = resp.data.data[i].name;\n        images.push({\n          image: \"data:image/png;base64,\" + _image.substring(2, _image.length - 1),\n          name: name\n        });\n      }\n\n      setImages(images);\n      setCharging(false);\n      setShowDownloadLink(true);\n    }).catch(function (error) {\n      console.log(error);\n      setCharging(false);\n      setShowDownloadLink(false);\n    });\n  };\n\n  return React.createElement(Card, {\n    style: styles.cardContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }, React.createElement(Card.Content, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }, React.createElement(AskQRCodeForm, {\n    handleFormSubmit: handleFormSubmit,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }), showDownloadLink ? React.createElement(Button, {\n    style: styles.downloadButton,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 11\n    }\n  }, React.createElement(PDFDownloadLink, {\n    document: React.createElement(PDFDocument, {\n      data: images,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 25\n      }\n    }),\n    fileName: \"SaveLives.pdf\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }\n  }, function (_ref) {\n    var blob = _ref.blob,\n        url = _ref.url,\n        loading = _ref.loading,\n        error = _ref.error;\n    return loading ? \"Loading document...\" : \"Download Pdf\";\n  })) : React.createElement(ActivityIndicator, {\n    animating: charging,\n    size: \"small\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 11\n    }\n  })));\n};\n\nvar styles = StyleSheet.create({\n  cardContainer: {\n    marginLeft: \"auto\",\n    marginRight: \"auto\",\n    paddingTop: \"80px\",\n    paddingBottom: \"80px\",\n    borderColor: \"#D3D3D3\",\n    borderWidth: \"1px\",\n    borderRadius: \"10px\"\n  },\n  downloadButton: {}\n});\nexport default CreateQRCodeContainer;","map":{"version":3,"sources":["C:/Users/DJsimon93/Desktop/IPL/bloc 3/PFE/PFE/Web_app/src/components/CreateQRCodeContainer/CreateQRCodeContainer.js"],"names":["React","useState","useEffect","AskQRCodeForm","Service","PDFDownloadLink","PDFDocument","Card","ActivityIndicator","Button","CreateQRCodeContainer","images","setImages","showDownloadLink","setShowDownloadLink","charging","setCharging","handleFormSubmit","data","askForQR","then","resp","console","log","i","image","length","name","push","substring","catch","error","styles","cardContainer","downloadButton","blob","url","loading","StyleSheet","create","marginLeft","marginRight","paddingTop","paddingBottom","borderColor","borderWidth","borderRadius"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport AskQRCodeForm from \"components/CreateQRCodeContainer/AskQRCodeForm\";\r\nimport { StyleSheet, View, Image } from \"react-native\";\r\nimport Service from \"services/Service\";\r\nimport { PDFDownloadLink } from \"@react-pdf/renderer\";\r\nimport PDFDocument from \"components/CreateQRCodeContainer/PDFDocument\";\r\nimport { Card, ActivityIndicator, Button } from \"react-native-paper\";\r\n\r\nconst CreateQRCodeContainer = () => {\r\n  const [images, setImages] = useState([]);\r\n  const [showDownloadLink, setShowDownloadLink] = useState(false);\r\n  const [charging, setCharging] = useState(false);\r\n\r\n  const handleFormSubmit = (data) => {\r\n    setShowDownloadLink(false);\r\n    setCharging(true);\r\n\r\n    Service.askForQR(data)\r\n      .then((resp) => {\r\n        console.log(resp.data)\r\n        var images = [];\r\n        for (var i = 0; i < image.length; i++) {\r\n        const image = resp.data.data[i].image;\r\n        const name = resp.data.data[i].name;\r\n        \r\n          images.push({\r\n            image:\"data:image/png;base64,\" + image.substring(2, image.length - 1), name:name  \r\n          });\r\n        }\r\n        setImages(images);\r\n        setCharging(false);\r\n        setShowDownloadLink(true);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n        setCharging(false);\r\n        setShowDownloadLink(false);\r\n      });\r\n  };\r\n  return (\r\n    <Card style={styles.cardContainer}>\r\n      <Card.Content>\r\n        <AskQRCodeForm handleFormSubmit={handleFormSubmit} />\r\n        {showDownloadLink ? (\r\n          <Button style={styles.downloadButton}>\r\n            <PDFDownloadLink\r\n              document={<PDFDocument data={images} />}\r\n              fileName=\"SaveLives.pdf\"\r\n            >\r\n              {({ blob, url, loading, error }) =>\r\n                loading ? \"Loading document...\" : \"Download Pdf\"\r\n              }\r\n            </PDFDownloadLink>\r\n          </Button>\r\n        ) : (\r\n          <ActivityIndicator animating={charging} size=\"small\" />\r\n        )}\r\n      </Card.Content>\r\n    </Card>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  cardContainer: {\r\n    marginLeft: \"auto\",\r\n    marginRight: \"auto\",\r\n    paddingTop: \"80px\",\r\n    paddingBottom: \"80px\",\r\n    borderColor: \"#D3D3D3\",\r\n    borderWidth: \"1px\",\r\n    borderRadius: \"10px\",\r\n  },\r\n  downloadButton: {},\r\n});\r\n\r\nexport default CreateQRCodeContainer;\r\n"]},"metadata":{},"sourceType":"module"}
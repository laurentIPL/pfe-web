{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\Laurent\\\\PFE\\\\web_app\\\\src\\\\components\\\\CreateQRCodeContainer\\\\CreateQRCodeContainer.js\";\n\nimport React, { useState } from \"react\";\nimport AskQRCodeForm from \"./AskQRCodeForm\";\nimport DisplayQRCodes from \"./DisplayQRCodes\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Service from \"../../services/Service\";\nimport GeneratePDF from \"./GeneratePDF\";\n\nvar CreateQRCodeContainer = function CreateQRCodeContainer() {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      images = _useState2[0],\n      setImages = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      quantity = _useState4[0],\n      setQuantity = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      loading = _useState6[0],\n      setLoading = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      hide = _useState8[0],\n      setHide = _useState8[1];\n\n  var handleFormSubmit = function handleFormSubmit(data) {\n    var resp, image, images, i;\n    return _regeneratorRuntime.async(function handleFormSubmit$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            setLoading(true);\n            _context.prev = 1;\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(Service.askForQR(data));\n\n          case 4:\n            resp = _context.sent;\n            image = resp.data.images;\n            images = [];\n\n            for (i = 0; i < image.length; i++) {\n              images.push(\"data:image/png;base64,\" + image[i].substring(2, image[i].length - 1));\n            }\n\n            setImages(images);\n            setHide(true);\n            _context.next = 15;\n            break;\n\n          case 12:\n            _context.prev = 12;\n            _context.t0 = _context[\"catch\"](1);\n            console.log(_context.t0);\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[1, 12]], Promise);\n  };\n\n  return React.createElement(View, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  }, React.createElement(AskQRCodeForm, {\n    setQRCodes: setQRCodes,\n    handleFormSubmit: handleFormSubmit,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }\n  }), QRCodes.length === 0 ? null : React.createElement(GeneratePDF, {\n    images: QRCodes,\n    quantity: quantity,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  }));\n};\n\nexport default CreateQRCodeContainer;","map":{"version":3,"sources":["C:/Users/Laurent/PFE/web_app/src/components/CreateQRCodeContainer/CreateQRCodeContainer.js"],"names":["React","useState","AskQRCodeForm","DisplayQRCodes","Service","GeneratePDF","CreateQRCodeContainer","images","setImages","quantity","setQuantity","loading","setLoading","hide","setHide","handleFormSubmit","data","askForQR","resp","image","i","length","push","substring","console","log","setQRCodes","QRCodes"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,aAAP;AACA,OAAOC,cAAP;;;AAEA,OAAOC,OAAP;AACA,OAAOC,WAAP;;AAEA,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB,GAAM;AAAA,kBACNL,QAAQ,CAAC,EAAD,CADF;AAAA;AAAA,MAC3BM,MAD2B;AAAA,MACnBC,SADmB;;AAAA,mBAEFP,QAAQ,CAAC,CAAD,CAFN;AAAA;AAAA,MAE3BQ,QAF2B;AAAA,MAEjBC,WAFiB;;AAAA,mBAGJT,QAAQ,CAAC,KAAD,CAHJ;AAAA;AAAA,MAG3BU,OAH2B;AAAA,MAGlBC,UAHkB;;AAAA,mBAIVX,QAAQ,CAAC,KAAD,CAJE;AAAA;AAAA,MAI3BY,IAJ2B;AAAA,MAIrBC,OAJqB;;AAMlC,MAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAOC,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACvBJ,YAAAA,UAAU,CAAC,IAAD,CAAV;AADuB;AAAA;AAAA,6CAIFR,OAAO,CAACa,QAAR,CAAiBD,IAAjB,CAJE;;AAAA;AAIfE,YAAAA,IAJe;AAKfC,YAAAA,KALe,GAKPD,IAAI,CAACF,IAAL,CAAUT,MALH;AAMjBA,YAAAA,MANiB,GAMR,EANQ;;AAOrB,iBAASa,CAAT,GAAa,CAAb,EAAgBA,CAAC,GAAGD,KAAK,CAACE,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrCb,cAAAA,MAAM,CAACe,IAAP,CACE,2BAA2BH,KAAK,CAACC,CAAD,CAAL,CAASG,SAAT,CAAmB,CAAnB,EAAsBJ,KAAK,CAACC,CAAD,CAAL,CAASC,MAAT,GAAkB,CAAxC,CAD7B;AAGD;;AACDb,YAAAA,SAAS,CAACD,MAAD,CAAT;AACAO,YAAAA,OAAO,CAAC,IAAD,CAAP;AAbqB;AAAA;;AAAA;AAAA;AAAA;AAerBU,YAAAA,OAAO,CAACC,GAAR;;AAfqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAzB;;AAkBA,SACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,aAAD;AACE,IAAA,UAAU,EAAEC,UADd;AAEE,IAAA,gBAAgB,EAAEX,gBAFpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAKGY,OAAO,CAACN,MAAR,KAAmB,CAAnB,GAAuB,IAAvB,GACC,oBAAC,WAAD;AAAa,IAAA,MAAM,EAAEM,OAArB;AAA8B,IAAA,QAAQ,EAAElB,QAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANJ,CADF;AAeD,CAvCD;;AAyCA,eAAeH,qBAAf","sourcesContent":["import React, { useState } from \"react\";\r\nimport AskQRCodeForm from \"components/CreateQRCodeContainer/AskQRCodeForm\";\r\nimport DisplayQRCodes from \"components/CreateQRCodeContainer/DisplayQRCodes\";\r\nimport { StyleSheet, View } from \"react-native\";\r\nimport Service from \"services/Service\";\r\nimport GeneratePDF from \"./GeneratePDF\";\r\n\r\nconst CreateQRCodeContainer = () => {\r\n  const [images, setImages] = useState([]);\r\n  const [quantity, setQuantity] = useState(0);\r\n  const [loading, setLoading] = useState(false);\r\n  const [hide, setHide] = useState(false);\r\n\r\n  const handleFormSubmit = async (data) => {\r\n    setLoading(true);\r\n\r\n    try {\r\n      const resp = await Service.askForQR(data);\r\n      const image = resp.data.images;\r\n      var images = [];\r\n      for (var i = 0; i < image.length; i++) {\r\n        images.push(\r\n          \"data:image/png;base64,\" + image[i].substring(2, image[i].length - 1)\r\n        );\r\n      }\r\n      setImages(images);\r\n      setHide(true);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n  return (\r\n    <View>\r\n      <AskQRCodeForm\r\n        setQRCodes={setQRCodes}\r\n        handleFormSubmit={handleFormSubmit}\r\n      />\r\n      {QRCodes.length === 0 ? null : (\r\n        <GeneratePDF images={QRCodes} quantity={quantity} />\r\n      )}\r\n\r\n      {/*       <View style={styles.rightCol}>\r\n        <DisplayQRCodes QRCodes={QRCodes} loading={loading} />\r\n      </View> */}\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default CreateQRCodeContainer;\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\Laurent\\\\PFE\\\\web_app\\\\src\\\\components\\\\CreateQRCodeContainer\\\\CreateQRCodeContainer.js\";\n\nimport React, { useState } from \"react\";\nimport AskQRCodeForm from \"./AskQRCodeForm\";\nimport DisplayQRCodes from \"./DisplayQRCodes\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Service from \"../../services/Service\";\nimport GeneratePDF from \"./GeneratePDF\";\n\nvar CreateQRCodeContainer = function CreateQRCodeContainer() {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      QRCodes = _useState2[0],\n      setQRCodes = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      loading = _useState4[0],\n      setLoading = _useState4[1];\n\n  var handleFormSubmit = function handleFormSubmit(data) {\n    setLoading(true);\n    Service.askForQR(data).then(function (resp) {\n      var image = resp.data.images;\n      var images = [];\n\n      for (var i = 0; i < image.length; i++) {\n        images.push(\"data:image/png;base64,\" + image[i].substring(2, image[i].length - 1));\n      }\n\n      setQRCodes(images);\n      setLoading(false);\n      console.log(resp.data.quantity);\n    });\n  };\n\n  console.log(QRCodes.length);\n  return React.createElement(View, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }\n  }, React.createElement(AskQRCodeForm, {\n    setQRCodes: setQRCodes,\n    handleFormSubmit: handleFormSubmit,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default CreateQRCodeContainer;","map":{"version":3,"sources":["C:/Users/Laurent/PFE/web_app/src/components/CreateQRCodeContainer/CreateQRCodeContainer.js"],"names":["React","useState","AskQRCodeForm","DisplayQRCodes","Service","GeneratePDF","CreateQRCodeContainer","QRCodes","setQRCodes","loading","setLoading","handleFormSubmit","data","askForQR","then","resp","image","images","i","length","push","substring","console","log","quantity"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,aAAP;AACA,OAAOC,cAAP;;;AAEA,OAAOC,OAAP;AACA,OAAOC,WAAP;;AAEA,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB,GAAM;AAAA,kBACJL,QAAQ,CAAC,EAAD,CADJ;AAAA;AAAA,MAC3BM,OAD2B;AAAA,MAClBC,UADkB;;AAAA,mBAEJP,QAAQ,CAAC,KAAD,CAFJ;AAAA;AAAA,MAE3BQ,OAF2B;AAAA,MAElBC,UAFkB;;AAIlC,MAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,IAAD,EAAU;AACjCF,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAN,IAAAA,OAAO,CAACS,QAAR,CAAiBD,IAAjB,EAAuBE,IAAvB,CAA4B,UAACC,IAAD,EAAU;AACpC,UAAMC,KAAK,GAAGD,IAAI,CAACH,IAAL,CAAUK,MAAxB;AACA,UAAIA,MAAM,GAAG,EAAb;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,KAAK,CAACG,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrCD,QAAAA,MAAM,CAACG,IAAP,CACE,2BAA2BJ,KAAK,CAACE,CAAD,CAAL,CAASG,SAAT,CAAmB,CAAnB,EAAsBL,KAAK,CAACE,CAAD,CAAL,CAASC,MAAT,GAAkB,CAAxC,CAD7B;AAGD;;AACDX,MAAAA,UAAU,CAACS,MAAD,CAAV;AACAP,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAY,MAAAA,OAAO,CAACC,GAAR,CAAYR,IAAI,CAACH,IAAL,CAAUY,QAAtB;AACD,KAXD;AAYD,GAdD;;AAeAF,EAAAA,OAAO,CAACC,GAAR,CAAYhB,OAAO,CAACY,MAApB;AACA,SACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,aAAD;AACE,IAAA,UAAU,EAAEX,UADd;AAEE,IAAA,gBAAgB,EAAEG,gBAFpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAeD,CAnCD;;AAqCA,eAAeL,qBAAf","sourcesContent":["import React, { useState } from \"react\";\r\nimport AskQRCodeForm from \"components/CreateQRCodeContainer/AskQRCodeForm\";\r\nimport DisplayQRCodes from \"components/CreateQRCodeContainer/DisplayQRCodes\";\r\nimport { StyleSheet, View } from \"react-native\";\r\nimport Service from \"services/Service\";\r\nimport GeneratePDF from \"./GeneratePDF\";\r\n\r\nconst CreateQRCodeContainer = () => {\r\n  const [QRCodes, setQRCodes] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const handleFormSubmit = (data) => {\r\n    setLoading(true);\r\n    Service.askForQR(data).then((resp) => {\r\n      const image = resp.data.images;\r\n      var images = [];\r\n      for (var i = 0; i < image.length; i++) {\r\n        images.push(\r\n          \"data:image/png;base64,\" + image[i].substring(2, image[i].length - 1)\r\n        );\r\n      }\r\n      setQRCodes(images);\r\n      setLoading(false);\r\n      console.log(resp.data.quantity);\r\n    });\r\n  };\r\n  console.log(QRCodes.length);\r\n  return (\r\n    <View>\r\n      <AskQRCodeForm\r\n        setQRCodes={setQRCodes}\r\n        handleFormSubmit={handleFormSubmit}\r\n      />\r\n      {/*       {QRCodes.length === 0 ? null : (\r\n        <GeneratePDF images={QRCodes} quantity={QRCodes.length} />\r\n      )} */}\r\n\r\n      {/*       <View style={styles.rightCol}>\r\n        <DisplayQRCodes QRCodes={QRCodes} loading={loading} />\r\n      </View> */}\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default CreateQRCodeContainer;\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\Laurent\\\\PFE\\\\Web_app\\\\src\\\\components\\\\Home\\\\GenerateQRCodeForm.js\";\n\nimport React, { useState } from \"react\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Service from \"../../services/Service\";\nimport CustomInput from \"../utils/CustomInput\";\nimport { Formik, Field } from \"formik\";\nimport * as yup from \"yup\";\nimport GeneratePDF from \"./GeneratePDF\";\nimport { Card, Title, Button } from \"react-native-paper\";\nvar loginSchema = yup.object({\n  quantity: yup.number().required(\"quantity is required\"),\n  quantity: yup.number().typeError(\"That doesn't look like a number\")\n});\n\nvar GenerateQRCodeForm = function GenerateQRCodeForm() {\n  var _useState = useState(React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 42\n    }\n  })),\n      _useState2 = _slicedToArray(_useState, 2),\n      QRImage = _useState2[0],\n      setQRImage = _useState2[1];\n\n  var _useState3 = useState(React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 34\n    }\n  })),\n      _useState4 = _slicedToArray(_useState3, 2),\n      PDF = _useState4[0],\n      setPDF = _useState4[1];\n\n  var handleSubmitPDF = function handleSubmitPDF(testB64String, quantity) {\n    setPDF(React.createElement(GeneratePDF, {\n      quantity: quantity,\n      image: testB64String,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 12\n      }\n    }));\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(Formik, {\n    initialValues: {\n      quantity: 1\n    },\n    onSubmit: function onSubmit(data, actions) {\n      setQRImage(React.createElement(\"p\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 22\n        }\n      }, \"waiting...\"));\n      Service.askForQR(data).then(function (resp) {\n        console.log(resp.data.images);\n        var image = resp.data.images;\n        var images = [];\n\n        for (var i = 0; i < image.length; i++) {\n          images.push(\"data:image/png;base64,\" + image[i].substring(2, image[i].length - 1));\n        }\n\n        setQRImage(React.createElement(Image, {\n          style: {\n            flex: 0.2,\n            width: 500,\n            height: 500,\n            borderRadius: 20\n          },\n          source: {\n            uri: images[0]\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 15\n          }\n        }));\n        setPDF(React.createElement(GeneratePDF, {\n          quantity: data.quantity,\n          images: images,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 20\n          }\n        }));\n      });\n    },\n    validationSchema: loginSchema,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }\n  }, function (_ref) {\n    var handleSubmit = _ref.handleSubmit,\n        isValid = _ref.isValid;\n    return React.createElement(Card, {\n      style: styles.cardContainer,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }\n    }, React.createElement(Card.Content, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }\n    }, React.createElement(Title, {\n      style: styles.title,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 15\n      }\n    }, \"Combien de QR Code avez-vous besoin ?\"), React.createElement(Field, {\n      component: CustomInput,\n      name: \"quantity\",\n      placeholder: \"1\",\n      type: \"number\",\n      min: \"1\",\n      max: \"30\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 15\n      }\n    }), React.createElement(Card.Actions, {\n      style: styles.button,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 15\n      }\n    }, React.createElement(Button, {\n      mode: \"contained\",\n      onPress: handleSubmit,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }\n    }, \"Ask QR Code Now\"))));\n  }), React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }, QRImage), React.createElement(View, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }, PDF));\n};\n\nvar styles = StyleSheet.create({\n  cardContainer: {\n    marginLeft: \"auto\",\n    marginRight: \"auto\",\n    paddingTop: \"80px\",\n    paddingBottom: \"80px\",\n    borderColor: \"#D3D3D3\",\n    borderWidth: \"1px\",\n    borderRadius: \"10px\"\n  },\n  title: {\n    textAlign: \"center\"\n  },\n  button: {\n    justifyContent: \"center\",\n    textAlign: \"center\"\n  },\n  QR: {\n    height: 100,\n    scale: 0.5\n  }\n});\nexport default GenerateQRCodeForm;","map":{"version":3,"sources":["C:/Users/Laurent/PFE/Web_app/src/components/Home/GenerateQRCodeForm.js"],"names":["React","useState","Service","CustomInput","Formik","Field","yup","GeneratePDF","Card","Title","Button","loginSchema","object","quantity","number","required","typeError","GenerateQRCodeForm","QRImage","setQRImage","PDF","setPDF","handleSubmitPDF","testB64String","data","actions","askForQR","then","resp","console","log","images","image","i","length","push","substring","flex","width","height","borderRadius","uri","handleSubmit","isValid","styles","cardContainer","title","button","StyleSheet","create","marginLeft","marginRight","paddingTop","paddingBottom","borderColor","borderWidth","textAlign","justifyContent","QR","scale"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport { Image, StyleSheet, View } from \"react-native\";\r\nimport Service from \"services/Service\";\r\nimport CustomInput from \"components/utils/CustomInput\";\r\nimport { Formik, Field } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport GeneratePDF from \"./GeneratePDF\";\r\nimport { Card, Title, Button } from \"react-native-paper\";\r\n\r\nconst loginSchema = yup.object({\r\n  quantity: yup.number().required(\"quantity is required\"),\r\n  quantity: yup.number().typeError(\"That doesn't look like a number\"),\r\n});\r\n\r\nconst GenerateQRCodeForm = () => {\r\n  const [QRImage, setQRImage] = useState(<div></div>);\r\n  const [PDF, setPDF] = useState(<div></div>);\r\n\r\n  const handleSubmitPDF = (testB64String, quantity) => {\r\n    setPDF(<GeneratePDF quantity={quantity} image={testB64String} />);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Formik\r\n        initialValues={{ quantity: 1 }}\r\n        onSubmit={(data, actions) => {\r\n          setQRImage(<p>waiting...</p>);\r\n          Service.askForQR(data).then((resp) => {\r\n            console.log(resp.data.images);\r\n            //console.log(token);\r\n            //const imageStringBase64 = resp.data.images.substring(2,resp.data.images.length -1);\r\n            const image = resp.data.images;\r\n            var images = [];\r\n            for (var i = 0; i < image.length; i++) {\r\n              images.push(\r\n                \"data:image/png;base64,\" +\r\n                  image[i].substring(2, image[i].length - 1)\r\n              );\r\n            }\r\n            setQRImage(\r\n              <Image\r\n                style={{ flex: 0.2, width: 500, height: 500, borderRadius: 20 }}\r\n                source={{ uri: images[0] }}\r\n              />\r\n            );\r\n            setPDF(<GeneratePDF quantity={data.quantity} images={images} />);\r\n          });\r\n        }}\r\n        validationSchema={loginSchema}\r\n      >\r\n        {({ handleSubmit, isValid }) => (\r\n          <Card style={styles.cardContainer}>\r\n            <Card.Content>\r\n              <Title style={styles.title}>\r\n                Combien de QR Code avez-vous besoin ?\r\n              </Title>\r\n              <Field\r\n                component={CustomInput}\r\n                name=\"quantity\"\r\n                placeholder=\"1\"\r\n                type=\"number\"\r\n                min=\"1\"\r\n                max=\"30\"\r\n              />\r\n\r\n              <Card.Actions style={styles.button}>\r\n                <Button mode=\"contained\" onPress={handleSubmit}>\r\n                  Ask QR Code Now\r\n                </Button>\r\n              </Card.Actions>\r\n            </Card.Content>\r\n          </Card>\r\n        )}\r\n      </Formik>\r\n      <div>{QRImage}</div>\r\n\r\n      <View>{PDF}</View>\r\n    </>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  cardContainer: {\r\n    marginLeft: \"auto\",\r\n    marginRight: \"auto\",\r\n    paddingTop: \"80px\",\r\n    paddingBottom: \"80px\",\r\n    borderColor: \"#D3D3D3\",\r\n    borderWidth: \"1px\",\r\n    borderRadius: \"10px\",\r\n  },\r\n  title: {\r\n    textAlign: \"center\",\r\n  },\r\n  button: {\r\n    justifyContent: \"center\",\r\n    textAlign: \"center\",\r\n  },\r\n  QR: {\r\n    height: 100,\r\n    scale: 0.5,\r\n  },\r\n});\r\n\r\nexport default GenerateQRCodeForm;\r\n"]},"metadata":{},"sourceType":"module"}
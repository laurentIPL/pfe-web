{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\Laurent\\\\PFE\\\\Web_app\\\\src\\\\components\\\\AuthForm\\\\EstablishmentForm.js\";\n\nimport React from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Formik, Field } from \"formik\";\nimport * as yup from \"yup\";\nimport AuthService from \"../../services/authService\";\nimport CustomInput from \"../utils/CustomInput\";\nimport { Button, Card, Title, IconButton } from \"react-native-paper\";\nimport backIcon from \"../../assets/svg/arrow-left.svg\";\nimport { useHistory } from \"react-router-dom\";\nvar EstablishmentSchema = yup.object({\n  name: yup.string().required(\"Name is required\"),\n  email: yup.string().email(\"Invalid email\").required(\"Email is required\"),\n  password: yup.string().min(8, \"Password must contain at least 8 characters\").required(\"Password is required\"),\n  num_tva: yup.string().uppercase().matches(\"^(BE)[0-9]{9}$\", 'Invalid TVA number (must start with \"BE\" followed by 10 digits)').required(\"TVA is required\"),\n  address_street: yup.string().required(\"Street name is required\"),\n  address_number: yup.number().typeError(\"Must be a number\").required(\"NÂ° is required\"),\n  address_postcode: yup.string().matches(\"^[1-9]{1}[0-9]{3}$\", \"Invalid postal code\").required(\"Postcode is required\"),\n  telephone: yup.number().typeError(\"Must be a number\").required(\"Phone number is required\")\n});\n\nvar EstablishmentForm = function EstablishmentForm(_ref) {\n  var setAccount = _ref.setAccount;\n  var history = useHistory();\n  return React.createElement(Formik, {\n    initialValues: {\n      name: \"\",\n      email: \"\",\n      password: \"\",\n      num_tva: \"\",\n      telephone: \"\",\n      address_street: \"\",\n      address_number: \"\",\n      address_postcode: \"\"\n    },\n    onSubmit: function onSubmit(data, actions) {\n      console.log(data);\n      AuthService.createEstablishment(data).then(function (resp) {\n        history.push(\"/login\");\n      }).catch(function (error) {\n        console.log(error.response);\n      });\n    },\n    validationSchema: EstablishmentSchema,\n    validateOnChange: true,\n    validateOnBlur: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }\n  }, function (_ref2) {\n    var handleSubmit = _ref2.handleSubmit,\n        isValid = _ref2.isValid;\n    return React.createElement(Card, {\n      style: styles.cardContainer,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }\n    }, React.createElement(Card.Content, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }\n    }, React.createElement(Title, {\n      style: styles.title,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 13\n      }\n    }, \"Cr\\xE9er un compte pour votre \\xE9tablissement\"), React.createElement(Field, {\n      component: CustomInput,\n      name: \"name\",\n      label: \"Nom\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }\n    }), React.createElement(Field, {\n      component: CustomInput,\n      name: \"num_tva\",\n      label: \"Num\\xE9ro de TVA (BE)\",\n      placeholder: \"BE1234567890\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }\n    }), React.createElement(View, {\n      style: styles.addressContainer,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }\n    }, React.createElement(View, {\n      style: styles.streetInput,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 15\n      }\n    }, React.createElement(Field, {\n      component: CustomInput,\n      name: \"address_street\",\n      label: \"Rue\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }\n    })), React.createElement(View, {\n      style: styles.numberInput,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 15\n      }\n    }, React.createElement(Field, {\n      component: CustomInput,\n      name: \"address_number\",\n      label: \"n\\xB0\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }\n    })), React.createElement(View, {\n      style: styles.postcodeInput,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 15\n      }\n    }, React.createElement(Field, {\n      component: CustomInput,\n      name: \"address_postcode\",\n      label: \"Code\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }\n    }))), React.createElement(Field, {\n      component: CustomInput,\n      name: \"telephone\",\n      label: \"T\\xE9l\\xE9phone\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 13\n      }\n    }), React.createElement(Field, {\n      component: CustomInput,\n      name: \"email\",\n      label: \"Email\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 13\n      }\n    }), React.createElement(Field, {\n      component: CustomInput,\n      name: \"password\",\n      label: \"Password\",\n      secureTextEntry: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 13\n      }\n    }), React.createElement(Card.Actions, {\n      style: styles.buttons,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 13\n      }\n    }, React.createElement(IconButton, {\n      color: \"#808080\",\n      icon: backIcon,\n      onPress: function onPress() {\n        return setAccount(\"\");\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 15\n      }\n    }), React.createElement(Button, {\n      mode: \"contained\",\n      onPress: handleSubmit,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 15\n      }\n    }, \"Valider\"))));\n  });\n};\n\nvar styles = StyleSheet.create({\n  cardContainer: {\n    width: \"550px\",\n    marginLeft: \"auto\",\n    marginRight: \"auto\",\n    paddingTop: \"20px\",\n    paddingBottom: \"20px\",\n    borderColor: \"#D3D3D3\",\n    borderWidth: \"1px\",\n    borderRadius: \"10px\",\n    boxShadow: \"0px 0px 30px rgba(0, 0, 0, 0.1)\",\n    transition: \"0.1s ease\"\n  },\n  addressContainer: {\n    flexDirection: \"row\",\n    justifyContent: \"space-between\"\n  },\n  streetInput: {\n    width: \"65%\"\n  },\n  numberInput: {\n    width: \"15%\"\n  },\n  postcodeInput: {\n    width: \"20%\"\n  },\n  title: {\n    textAlign: \"center\"\n  },\n  buttons: {\n    justifyContent: \"space-between\"\n  }\n});\nexport default EstablishmentForm;","map":{"version":3,"sources":["C:/Users/Laurent/PFE/Web_app/src/components/AuthForm/EstablishmentForm.js"],"names":["React","Formik","Field","yup","AuthService","CustomInput","Button","Card","Title","IconButton","backIcon","useHistory","EstablishmentSchema","object","name","string","required","email","password","min","num_tva","uppercase","matches","address_street","address_number","number","typeError","address_postcode","telephone","EstablishmentForm","setAccount","history","data","actions","console","log","createEstablishment","then","resp","push","catch","error","response","handleSubmit","isValid","styles","cardContainer","title","addressContainer","streetInput","numberInput","postcodeInput","buttons","StyleSheet","create","width","marginLeft","marginRight","paddingTop","paddingBottom","borderColor","borderWidth","borderRadius","boxShadow","transition","flexDirection","justifyContent","textAlign"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { StyleSheet, View } from \"react-native\";\r\nimport { Formik, Field } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport AuthService from \"services/authService\";\r\nimport CustomInput from \"components/utils/CustomInput\";\r\nimport { Button, Card, Title, IconButton } from \"react-native-paper\";\r\nimport backIcon from \"assets/svg/arrow-left.svg\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst EstablishmentSchema = yup.object({\r\n  name: yup.string().required(\"Name is required\"),\r\n  email: yup.string().email(\"Invalid email\").required(\"Email is required\"),\r\n  password: yup\r\n    .string()\r\n    .min(8, \"Password must contain at least 8 characters\")\r\n    .required(\"Password is required\"),\r\n  num_tva: yup\r\n    .string()\r\n    .uppercase()\r\n    .matches(\r\n      \"^(BE)[0-9]{9}$\",\r\n      'Invalid TVA number (must start with \"BE\" followed by 10 digits)'\r\n    )\r\n    .required(\"TVA is required\"),\r\n  address_street: yup.string().required(\"Street name is required\"),\r\n  address_number: yup\r\n    .number()\r\n    .typeError(\"Must be a number\")\r\n    .required(\"NÂ° is required\"),\r\n  address_postcode: yup\r\n    .string()\r\n    .matches(\"^[1-9]{1}[0-9]{3}$\", \"Invalid postal code\")\r\n    .required(\"Postcode is required\"),\r\n  telephone: yup\r\n    .number()\r\n    .typeError(\"Must be a number\")\r\n    .required(\"Phone number is required\"),\r\n});\r\n\r\nconst EstablishmentForm = ({ setAccount }) => {\r\n  const history = useHistory();\r\n  return (\r\n    <Formik\r\n      initialValues={{\r\n        name: \"\",\r\n        email: \"\",\r\n        password: \"\",\r\n        num_tva: \"\",\r\n        telephone: \"\",\r\n        address_street: \"\",\r\n        address_number: \"\",\r\n        address_postcode: \"\",\r\n      }}\r\n      onSubmit={(data, actions) => {\r\n        console.log(data);\r\n        AuthService.createEstablishment(data)\r\n          .then((resp) => {\r\n            history.push(\"/login\");\r\n          })\r\n          .catch((error) => {\r\n            console.log(error.response);\r\n          });\r\n      }}\r\n      validationSchema={EstablishmentSchema}\r\n      validateOnChange={true}\r\n      validateOnBlur={true}\r\n    >\r\n      {({ handleSubmit, isValid }) => (\r\n        <Card style={styles.cardContainer}>\r\n          <Card.Content>\r\n            <Title style={styles.title}>\r\n              CrÃ©er un compte pour votre Ã©tablissement\r\n            </Title>\r\n            <Field component={CustomInput} name=\"name\" label=\"Nom\" />\r\n            <Field\r\n              component={CustomInput}\r\n              name=\"num_tva\"\r\n              label=\"NumÃ©ro de TVA (BE)\"\r\n              placeholder=\"BE1234567890\"\r\n            />\r\n            <View style={styles.addressContainer}>\r\n              <View style={styles.streetInput}>\r\n                <Field\r\n                  component={CustomInput}\r\n                  name=\"address_street\"\r\n                  label=\"Rue\"\r\n                />\r\n              </View>\r\n              <View style={styles.numberInput}>\r\n                <Field\r\n                  component={CustomInput}\r\n                  name=\"address_number\"\r\n                  label=\"nÂ°\"\r\n                />\r\n              </View>\r\n              <View style={styles.postcodeInput}>\r\n                <Field\r\n                  component={CustomInput}\r\n                  name=\"address_postcode\"\r\n                  label=\"Code\"\r\n                />\r\n              </View>\r\n            </View>\r\n            <Field component={CustomInput} name=\"telephone\" label=\"TÃ©lÃ©phone\" />\r\n            <Field component={CustomInput} name=\"email\" label=\"Email\" />\r\n            <Field\r\n              component={CustomInput}\r\n              name=\"password\"\r\n              label=\"Password\"\r\n              secureTextEntry={true}\r\n            />\r\n            <Card.Actions style={styles.buttons}>\r\n              <IconButton\r\n                color=\"#808080\"\r\n                icon={backIcon}\r\n                onPress={() => setAccount(\"\")}\r\n              />\r\n              <Button mode=\"contained\" onPress={handleSubmit}>\r\n                Valider\r\n              </Button>\r\n            </Card.Actions>\r\n          </Card.Content>\r\n        </Card>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  cardContainer: {\r\n    width: \"550px\",\r\n    marginLeft: \"auto\",\r\n    marginRight: \"auto\",\r\n    paddingTop: \"20px\",\r\n    paddingBottom: \"20px\",\r\n    borderColor: \"#D3D3D3\",\r\n    borderWidth: \"1px\",\r\n    borderRadius: \"10px\",\r\n    boxShadow: \"0px 0px 30px rgba(0, 0, 0, 0.1)\",\r\n    transition: \"0.1s ease\",\r\n  },\r\n  addressContainer: {\r\n    flexDirection: \"row\",\r\n    justifyContent: \"space-between\",\r\n  },\r\n  streetInput: {\r\n    width: \"65%\",\r\n  },\r\n  numberInput: {\r\n    width: \"15%\",\r\n  },\r\n  postcodeInput: {\r\n    width: \"20%\",\r\n  },\r\n  title: {\r\n    textAlign: \"center\",\r\n  },\r\n  buttons: {\r\n    justifyContent: \"space-between\",\r\n  },\r\n});\r\n\r\nexport default EstablishmentForm;\r\n"]},"metadata":{},"sourceType":"module"}
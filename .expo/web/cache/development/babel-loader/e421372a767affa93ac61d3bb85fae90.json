{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\Laurent\\\\PFE\\\\Web_app\\\\src\\\\components\\\\AuthForm\\\\DoctorForm.js\";\n\nimport React, { useState } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { Formik, Field } from \"formik\";\nimport * as yup from \"yup\";\nimport AuthService from \"../../services/authService\";\nimport CustomInput from \"../utils/CustomInput\";\nimport { Button, Card, Title, IconButton } from \"react-native-paper\";\nimport backIcon from \"../../assets/svg/arrow-left.svg\";\nimport { useHistory } from \"react-router\";\nvar DoctorSchema = yup.object({\n  last_name: yup.string().required(\"Last name is required\"),\n  first_name: yup.string().required(\"First name is required\"),\n  email: yup.string().email(\"Invalid email\").required(\"Email is required\"),\n  password: yup.string().min(8, \"Password must contain at least 8 characters\").required(\"Password is required\"),\n  num_inami: yup.number().typeError(\"Must be a number\").required(\"INAMI is required\"),\n  address_street: yup.string().required(\"Street name is required\"),\n  address_number: yup.number().typeError(\"Must be a number\").required(\"NÂ° is required\"),\n  address_postcode: yup.string().matches(\"^[1-9]{1}[0-9]{3}$\", \"Invalid postal code\").required(\"Postcode is required\"),\n  telephone: yup.number().typeError(\"Must be a number\").required(\"Phone number is required\")\n});\n\nvar DoctorForm = function DoctorForm(_ref) {\n  var setAccount = _ref.setAccount;\n  var history = useHistory();\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      error = _useState2[0],\n      setError = _useState2[1];\n\n  return React.createElement(Formik, {\n    initialValues: {\n      last_name: \"\",\n      first_name: \"\",\n      email: \"\",\n      password: \"\",\n      num_inami: \"\",\n      telephone: \"\",\n      address_street: \"\",\n      address_number: \"\",\n      address_postcode: \"\"\n    },\n    onSubmit: function onSubmit(data, actions) {\n      setError(\"\");\n      console.log(data);\n      AuthService.createDoctor(data).then(function (resp) {\n        history.push(\"/login\");\n      }).catch(function (error) {\n        setError(error.response.data.response);\n      });\n    },\n    validationSchema: DoctorSchema,\n    validateOnChange: true,\n    validateOnBlur: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, function (_ref2) {\n    var handleSubmit = _ref2.handleSubmit,\n        isValid = _ref2.isValid;\n    return React.createElement(Card, {\n      style: styles.cardContainer,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }\n    }, React.createElement(Title, {\n      style: styles.title,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }\n    }, \"Cr\\xE9er un compte M\\xE9decin\"), React.createElement(Card.Content, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }\n    }, React.createElement(Field, {\n      component: CustomInput,\n      name: \"last_name\",\n      label: \"Nom\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }\n    }), React.createElement(Field, {\n      component: CustomInput,\n      name: \"first_name\",\n      label: \"Pr\\xE9nom\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }\n    }), React.createElement(Field, {\n      component: CustomInput,\n      name: \"num_inami\",\n      label: \"Num\\xE9ro INAMI\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }\n    }), React.createElement(View, {\n      style: styles.addressContainer,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }\n    }, React.createElement(View, {\n      style: styles.streetInput,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 15\n      }\n    }, React.createElement(Field, {\n      component: CustomInput,\n      name: \"address_street\",\n      label: \"Rue\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }\n    })), React.createElement(View, {\n      style: styles.numberInput,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 15\n      }\n    }, React.createElement(Field, {\n      component: CustomInput,\n      name: \"address_number\",\n      label: \"n\\xB0\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }\n    })), React.createElement(View, {\n      style: styles.postcodeInput,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 15\n      }\n    }, React.createElement(Field, {\n      component: CustomInput,\n      name: \"address_postcode\",\n      label: \"Code\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }\n    }))), React.createElement(Field, {\n      component: CustomInput,\n      name: \"telephone\",\n      label: \"T\\xE9l\\xE9phone\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 13\n      }\n    }), React.createElement(Field, {\n      component: CustomInput,\n      name: \"email\",\n      label: \"Email\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 13\n      }\n    }), React.createElement(Field, {\n      component: CustomInput,\n      name: \"password\",\n      label: \"Password\",\n      secureTextEntry: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 13\n      }\n    }), React.createElement(Text, {\n      style: styles.error,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 13\n      }\n    }, error), React.createElement(Card.Actions, {\n      style: styles.buttons,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 13\n      }\n    }, React.createElement(IconButton, {\n      color: \"#808080\",\n      icon: backIcon,\n      onPress: function onPress() {\n        return setAccount(\"\");\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 15\n      }\n    }), React.createElement(Button, {\n      mode: \"contained\",\n      onPress: handleSubmit,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 15\n      }\n    }, \"Valider\"))));\n  });\n};\n\nvar styles = StyleSheet.create({\n  cardContainer: {\n    width: \"550px\",\n    marginLeft: \"auto\",\n    marginRight: \"auto\",\n    paddingTop: \"20px\",\n    paddingBottom: \"20px\",\n    borderColor: \"#D3D3D3\",\n    borderWidth: \"1px\",\n    borderRadius: \"10px\",\n    boxShadow: \"0px 0px 30px rgba(0, 0, 0, 0.1)\",\n    transition: \"0.1s ease\"\n  },\n  addressContainer: {\n    flexDirection: \"row\",\n    justifyContent: \"space-between\"\n  },\n  streetInput: {\n    width: \"65%\"\n  },\n  numberInput: {\n    width: \"15%\"\n  },\n  postcodeInput: {\n    width: \"20%\"\n  },\n  title: {\n    textAlign: \"center\"\n  },\n  buttons: {\n    justifyContent: \"space-between\"\n  },\n  error: {\n    textAlign: \"center\",\n    color: \"red\"\n  }\n});\nexport default DoctorForm;","map":{"version":3,"sources":["C:/Users/Laurent/PFE/Web_app/src/components/AuthForm/DoctorForm.js"],"names":["React","useState","Formik","Field","yup","AuthService","CustomInput","Button","Card","Title","IconButton","backIcon","useHistory","DoctorSchema","object","last_name","string","required","first_name","email","password","min","num_inami","number","typeError","address_street","address_number","address_postcode","matches","telephone","DoctorForm","setAccount","history","error","setError","data","actions","console","log","createDoctor","then","resp","push","catch","response","handleSubmit","isValid","styles","cardContainer","title","addressContainer","streetInput","numberInput","postcodeInput","buttons","StyleSheet","create","width","marginLeft","marginRight","paddingTop","paddingBottom","borderColor","borderWidth","borderRadius","boxShadow","transition","flexDirection","justifyContent","textAlign","color"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport { StyleSheet, View, Text} from \"react-native\";\r\nimport { Formik, Field } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport AuthService from \"services/authService\";\r\nimport CustomInput from \"components/utils/CustomInput\";\r\nimport { Button, Card, Title, IconButton } from \"react-native-paper\";\r\nimport backIcon from \"assets/svg/arrow-left.svg\";\r\nimport { useHistory } from \"react-router\";\r\n\r\nconst DoctorSchema = yup.object({\r\n  last_name: yup.string().required(\"Last name is required\"),\r\n  first_name: yup.string().required(\"First name is required\"),\r\n  email: yup.string().email(\"Invalid email\").required(\"Email is required\"),\r\n  password: yup\r\n    .string()\r\n    .min(8, \"Password must contain at least 8 characters\")\r\n    .required(\"Password is required\"),\r\n  num_inami: yup\r\n    .number()\r\n    .typeError(\"Must be a number\")\r\n    .required(\"INAMI is required\"),\r\n  address_street: yup.string().required(\"Street name is required\"),\r\n  address_number: yup\r\n    .number()\r\n    .typeError(\"Must be a number\")\r\n    .required(\"NÂ° is required\"),\r\n  address_postcode: yup\r\n    .string()\r\n    .matches(\"^[1-9]{1}[0-9]{3}$\", \"Invalid postal code\")\r\n    .required(\"Postcode is required\"),\r\n  telephone: yup\r\n    .number()\r\n    .typeError(\"Must be a number\")\r\n    .required(\"Phone number is required\"),\r\n});\r\n\r\nconst DoctorForm = ({ setAccount }) => {\r\n  const history = useHistory();\r\n  const [error, setError] = useState(\"\");\r\n  return (\r\n    <Formik\r\n      initialValues={{\r\n        last_name: \"\",\r\n        first_name: \"\",\r\n        email: \"\",\r\n        password: \"\",\r\n        num_inami: \"\",\r\n        telephone: \"\",\r\n        address_street: \"\",\r\n        address_number: \"\",\r\n        address_postcode: \"\",\r\n      }}\r\n      onSubmit={(data, actions) => {\r\n        setError(\"\");\r\n        console.log(data);\r\n        AuthService.createDoctor(data)\r\n          .then((resp) => {\r\n            history.push(\"/login\");\r\n          })\r\n          .catch((error) => {\r\n            setError(error.response.data.response);\r\n          });\r\n      }}\r\n      validationSchema={DoctorSchema}\r\n      validateOnChange={true}\r\n      validateOnBlur={true}\r\n    >\r\n      {({ handleSubmit, isValid }) => (\r\n        <Card style={styles.cardContainer}>\r\n          <Title style={styles.title}>CrÃ©er un compte MÃ©decin</Title>\r\n          <Card.Content>\r\n            <Field component={CustomInput} name=\"last_name\" label=\"Nom\" />\r\n            <Field component={CustomInput} name=\"first_name\" label=\"PrÃ©nom\" />\r\n            <Field\r\n              component={CustomInput}\r\n              name=\"num_inami\"\r\n              label=\"NumÃ©ro INAMI\"\r\n            />\r\n            <View style={styles.addressContainer}>\r\n              <View style={styles.streetInput}>\r\n                <Field\r\n                  component={CustomInput}\r\n                  name=\"address_street\"\r\n                  label=\"Rue\"\r\n                />\r\n              </View>\r\n              <View style={styles.numberInput}>\r\n                <Field\r\n                  component={CustomInput}\r\n                  name=\"address_number\"\r\n                  label=\"nÂ°\"\r\n                />\r\n              </View>\r\n              <View style={styles.postcodeInput}>\r\n                <Field\r\n                  component={CustomInput}\r\n                  name=\"address_postcode\"\r\n                  label=\"Code\"\r\n                />\r\n              </View>\r\n            </View>\r\n            <Field component={CustomInput} name=\"telephone\" label=\"TÃ©lÃ©phone\" />\r\n            <Field component={CustomInput} name=\"email\" label=\"Email\" />\r\n            <Field\r\n              component={CustomInput}\r\n              name=\"password\"\r\n              label=\"Password\"\r\n              secureTextEntry={true}\r\n            />\r\n            <Text style={styles.error}>{error}</Text>\r\n            <Card.Actions style={styles.buttons}>\r\n              <IconButton\r\n                color=\"#808080\"\r\n                icon={backIcon}\r\n                onPress={() => setAccount(\"\")}\r\n              />\r\n              <Button mode=\"contained\" onPress={handleSubmit}>\r\n                Valider\r\n              </Button>\r\n            </Card.Actions>\r\n          </Card.Content>\r\n        </Card>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  cardContainer: {\r\n    width: \"550px\",\r\n    marginLeft: \"auto\",\r\n    marginRight: \"auto\",\r\n    paddingTop: \"20px\",\r\n    paddingBottom: \"20px\",\r\n    borderColor: \"#D3D3D3\",\r\n    borderWidth: \"1px\",\r\n    borderRadius: \"10px\",\r\n    boxShadow: \"0px 0px 30px rgba(0, 0, 0, 0.1)\",\r\n    transition: \"0.1s ease\",\r\n  },\r\n  addressContainer: {\r\n    flexDirection: \"row\",\r\n    justifyContent: \"space-between\",\r\n  },\r\n  streetInput: {\r\n    width: \"65%\",\r\n  },\r\n  numberInput: {\r\n    width: \"15%\",\r\n  },\r\n  postcodeInput: {\r\n    width: \"20%\",\r\n  },\r\n  title: {\r\n    textAlign: \"center\",\r\n  },\r\n  buttons: {\r\n    justifyContent: \"space-between\",\r\n  },\r\n  error: {\r\n    textAlign: \"center\",\r\n    color: \"red\",\r\n  },\r\n});\r\n\r\nexport default DoctorForm;\r\n"]},"metadata":{},"sourceType":"module"}
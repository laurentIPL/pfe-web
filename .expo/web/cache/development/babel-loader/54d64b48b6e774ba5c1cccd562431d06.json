{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\DJsimon93\\\\Desktop\\\\IPL\\\\bloc 3\\\\PFE\\\\PFE\\\\Web_app\\\\src\\\\components\\\\CreateQRCodeContainer\\\\CreateQRCodeContainer.js\";\n\nimport React, { useState, useEffect } from \"react\";\nimport AskQRCodeForm from \"./AskQRCodeForm\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Service from \"../../services/Service\";\nimport { PDFDownloadLink } from \"@react-pdf/renderer\";\nimport PDFDocument from \"./PDFDocument\";\nimport { Card, ActivityIndicator, Button } from \"react-native-paper\";\n\nvar CreateQRCodeContainer = function CreateQRCodeContainer(_ref) {\n  var setDisplay = _ref.setDisplay;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      images = _useState2[0],\n      setImages = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      showDownloadLink = _useState4[0],\n      setShowDownloadLink = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      charging = _useState6[0],\n      setCharging = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      received = _useState8[0],\n      setReceived = _useState8[1];\n\n  var _useState9 = useState(\"\"),\n      _useState10 = _slicedToArray(_useState9, 2),\n      error = _useState10[0],\n      setError = _useState10[1];\n\n  var handleFormSubmit = function handleFormSubmit(data) {\n    setShowDownloadLink(false);\n    setCharging(true);\n    setDisplay(false);\n    Service.askForQR(data).then(function (resp) {\n      var images = [];\n\n      for (var i = 0; i < resp.data.data.length; i++) {\n        var image = resp.data.data[i].image;\n        var name = resp.data.data[i].name;\n        images.push({\n          image: \"data:image/png;base64,\" + image.substring(2, image.length - 1),\n          name: name\n        });\n      }\n\n      setImages(images);\n      console.log(images);\n      setCharging(false);\n      setShowDownloadLink(true);\n      setReceived(false);\n      setError(\"\");\n    }).catch(function (error) {\n      setCharging(false);\n      setShowDownloadLink(false);\n      setReceived(true);\n      setError(error.response.data.response);\n    });\n  };\n\n  return React.createElement(Card, {\n    style: styles.cardContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, React.createElement(Card.Content, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }, React.createElement(AskQRCodeForm, {\n    handleFormSubmit: handleFormSubmit,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }), showDownloadLink ? React.createElement(Button, {\n    style: styles.downloadButton,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 11\n    }\n  }, React.createElement(PDFDownloadLink, {\n    document: React.createElement(PDFDocument, {\n      data: images,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 25\n      }\n    }),\n    fileName: \"SaveLives.pdf\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }\n  }, function (_ref2) {\n    var blob = _ref2.blob,\n        url = _ref2.url,\n        loading = _ref2.loading,\n        error = _ref2.error;\n    return loading ? \"Loading document...\" : \"Download Pdf\";\n  })) : React.createElement(ActivityIndicator, {\n    animating: charging,\n    size: \"small\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 11\n    }\n  }), received ? React.createElement(Text, {\n    style: styles.text,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 20\n    }\n  }, \"error:\" + error) : \"\"));\n};\n\nvar styles = StyleSheet.create({\n  cardContainer: {\n    marginLeft: \"auto\",\n    marginRight: \"auto\",\n    paddingTop: \"80px\",\n    paddingBottom: \"50px\",\n    borderColor: \"#D3D3D3\",\n    borderWidth: \"1px\",\n    borderRadius: \"10px\"\n  },\n  text: {\n    color: \"red\"\n  },\n  downloadButton: {}\n});\nexport default CreateQRCodeContainer;","map":{"version":3,"sources":["C:/Users/DJsimon93/Desktop/IPL/bloc 3/PFE/PFE/Web_app/src/components/CreateQRCodeContainer/CreateQRCodeContainer.js"],"names":["React","useState","useEffect","AskQRCodeForm","Service","PDFDownloadLink","PDFDocument","Card","ActivityIndicator","Button","CreateQRCodeContainer","setDisplay","images","setImages","showDownloadLink","setShowDownloadLink","charging","setCharging","received","setReceived","error","setError","handleFormSubmit","data","askForQR","then","resp","i","length","image","name","push","substring","console","log","catch","response","styles","cardContainer","downloadButton","blob","url","loading","text","StyleSheet","create","marginLeft","marginRight","paddingTop","paddingBottom","borderColor","borderWidth","borderRadius","color"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport AskQRCodeForm from \"components/CreateQRCodeContainer/AskQRCodeForm\";\r\nimport { StyleSheet,Text, View, Image } from \"react-native\";\r\nimport Service from \"services/Service\";\r\nimport { PDFDownloadLink } from \"@react-pdf/renderer\";\r\nimport PDFDocument from \"components/CreateQRCodeContainer/PDFDocument\";\r\nimport { Card, ActivityIndicator, Button } from \"react-native-paper\";\r\n\r\nconst CreateQRCodeContainer = ({setDisplay}) => {\r\n  const [images, setImages] = useState([]);\r\n  const [showDownloadLink, setShowDownloadLink] = useState(false);\r\n  const [charging, setCharging] = useState(false);\r\n  const [received,setReceived] = useState(false);\r\n  const [error,setError] = useState(\"\");\r\n\r\n  const handleFormSubmit = (data) => {\r\n    setShowDownloadLink(false);\r\n    setCharging(true);\r\n    setDisplay(false)\r\n\r\n    Service.askForQR(data)\r\n      .then((resp) => {\r\n        var images = [];\r\n        for (var i = 0; i < resp.data.data.length; i++) {\r\n        const image = resp.data.data[i].image;\r\n        const name = resp.data.data[i].name;\r\n        \r\n          images.push({\r\n            image:\"data:image/png;base64,\" + image.substring(2, image.length - 1), name:name  \r\n          });\r\n        }\r\n        setImages(images);\r\n        console.log(images)\r\n        setCharging(false);\r\n        setShowDownloadLink(true);\r\n        setReceived(false);\r\n        setError(\"\");\r\n        \r\n      })\r\n      .catch((error) => {\r\n        setCharging(false);\r\n        setShowDownloadLink(false);\r\n        setReceived(true);\r\n        setError(error.response.data.response)\r\n      });\r\n  };\r\n  return (\r\n    <Card style={styles.cardContainer}>\r\n      <Card.Content>\r\n        <AskQRCodeForm handleFormSubmit={handleFormSubmit} />\r\n        {showDownloadLink ? (\r\n          <Button style={styles.downloadButton}>\r\n            <PDFDownloadLink\r\n              document={<PDFDocument data={images} />}\r\n              fileName=\"SaveLives.pdf\"\r\n            >\r\n              {({ blob, url, loading, error }) =>\r\n                loading ? \"Loading document...\" : \"Download Pdf\"\r\n              }\r\n            </PDFDownloadLink>\r\n          </Button>\r\n        ) : (\r\n          <ActivityIndicator animating={charging} size=\"small\" />\r\n        )}\r\n        {received? <Text style={styles.text}>{`error:${error}`}</Text>:\"\"}\r\n      </Card.Content>\r\n    </Card>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  cardContainer: {\r\n    marginLeft: \"auto\",\r\n    marginRight: \"auto\",\r\n    paddingTop: \"80px\",\r\n    paddingBottom: \"50px\",\r\n    borderColor: \"#D3D3D3\",\r\n    borderWidth: \"1px\",\r\n    borderRadius: \"10px\",\r\n  },\r\n  text:{\r\n    color:\"red\",\r\n  },\r\n  downloadButton: {},\r\n});\r\n\r\nexport default CreateQRCodeContainer;\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\Laurent\\\\PFE\\\\Web_app\\\\src\\\\components\\\\Home.js\";\n\nimport React, { useState } from \"react\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Service from \"../services/Service\";\nimport CustomInput from \"./CustomInput\";\nimport { Formik, Field } from \"formik\";\nimport * as yup from \"yup\";\nimport GeneratePDF from \"./GeneratePDF\";\nimport Logout from \"./Logout\";\nvar loginSchema = yup.object({\n  quantity: yup.number().required(\"quantity is required\"),\n  quantity: yup.number().typeError(\"That doesn't look like a number\")\n});\n\nvar Home = function Home() {\n  var _useState = useState(React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 42\n    }\n  })),\n      _useState2 = _slicedToArray(_useState, 2),\n      QRImage = _useState2[0],\n      setQRImage = _useState2[1];\n\n  var _useState3 = useState(React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 34\n    }\n  })),\n      _useState4 = _slicedToArray(_useState3, 2),\n      PDF = _useState4[0],\n      setPDF = _useState4[1];\n\n  var handleSubmitPDF = function handleSubmitPDF(testB64String, quantity) {\n    setPDF(React.createElement(GeneratePDF, {\n      quantity: quantity,\n      image: testB64String,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 12\n      }\n    }));\n  };\n\n  return React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }\n  }, React.createElement(Logout, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }\n  }), React.createElement(Formik, {\n    style: styles.container,\n    initialValues: {\n      quantity: 1\n    },\n    onSubmit: function onSubmit(data, actions) {\n      setQRImage(React.createElement(\"p\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 22\n        }\n      }, \"waiting...\"));\n      Service.askForQR(data).then(function (resp) {\n        console.log(resp.data.images);\n        console.log(token);\n        var image = resp.data.images;\n        var images = [];\n\n        for (var i = 0; i < image.length; i++) {\n          images.push(\"data:image/png;base64,\" + image[i].substring(2, image[i].length - 1));\n        }\n\n        setQRImage(React.createElement(Image, {\n          style: {\n            flex: 0.2,\n            width: 500,\n            height: 500,\n            borderRadius: 20\n          },\n          source: {\n            uri: images[0]\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 15\n          }\n        }));\n        setPDF(React.createElement(GeneratePDF, {\n          quantity: data.quantity,\n          images: images,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 20\n          }\n        }));\n      });\n    },\n    validationSchema: loginSchema,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }\n  }, function (_ref) {\n    var handleSubmit = _ref.handleSubmit,\n        isValid = _ref.isValid;\n    return React.createElement(View, {\n      style: styles.loginContainer,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }\n    }, React.createElement(Text, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }\n    }, \"How many QR Codes do you need? (example: 8)\"), React.createElement(Field, {\n      component: CustomInput,\n      name: \"quantity\",\n      placeholder: \"1\",\n      type: \"number\",\n      min: \"1\",\n      max: \"30\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }\n    }), React.createElement(Button, {\n      onPress: handleSubmit,\n      title: \"Ask QR Code Now\",\n      color: \"#841584\",\n      accessibilityLabel: \"Generate A Usable QRCode\",\n      disabled: !isValid,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }\n    }));\n  }), React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }, QRImage), React.createElement(View, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }, PDF));\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  },\n  loginContainer: {\n    width: \"30%\",\n    alignItems: \"center\",\n    backgroundColor: \"white\",\n    padding: 10,\n    elevation: 10,\n    backgroundColor: \"#e6e6e6\",\n    justifyContent: \"center\"\n  },\n  QR: {\n    height: 100,\n    scale: 0.5\n  }\n});\nexport default Home;","map":{"version":3,"sources":["C:/Users/Laurent/PFE/Web_app/src/components/Home.js"],"names":["React","useState","Service","CustomInput","Formik","Field","yup","GeneratePDF","Logout","loginSchema","object","quantity","number","required","typeError","Home","QRImage","setQRImage","PDF","setPDF","handleSubmitPDF","testB64String","styles","container","data","actions","askForQR","then","resp","console","log","images","token","image","i","length","push","substring","flex","width","height","borderRadius","uri","handleSubmit","isValid","loginContainer","StyleSheet","create","justifyContent","alignItems","backgroundColor","padding","elevation","QR","scale"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport { Button, Image, StyleSheet, View, Text } from \"react-native\";\r\nimport Service from \"../services/Service\";\r\nimport CustomInput from \"./CustomInput\";\r\nimport { Formik, Field } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport GeneratePDF from \"./GeneratePDF\";\r\nimport Logout from \"components/Logout\";\r\n\r\nconst loginSchema = yup.object({\r\n  quantity: yup.number().required(\"quantity is required\"),\r\n  quantity: yup.number().typeError(\"That doesn't look like a number\"),\r\n});\r\n\r\nconst Home = () => {\r\n  const [QRImage, setQRImage] = useState(<div></div>);\r\n  const [PDF, setPDF] = useState(<div></div>);\r\n\r\n  const handleSubmitPDF = (testB64String, quantity) => {\r\n    setPDF(<GeneratePDF quantity={quantity} image={testB64String} />);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Logout />\r\n      <Formik\r\n        style={styles.container}\r\n        initialValues={{ quantity: 1 }}\r\n        onSubmit={(data, actions) => {\r\n          setQRImage(<p>waiting...</p>);\r\n          Service.askForQR(data).then((resp) => {\r\n            console.log(resp.data.images);\r\n            console.log(token);\r\n            //const imageStringBase64 = resp.data.images.substring(2,resp.data.images.length -1);\r\n            const image = resp.data.images;\r\n            var images = [];\r\n            for (var i = 0; i < image.length; i++) {\r\n              images.push(\r\n                \"data:image/png;base64,\" +\r\n                  image[i].substring(2, image[i].length - 1)\r\n              );\r\n            }\r\n            setQRImage(\r\n              <Image\r\n                style={{ flex: 0.2, width: 500, height: 500, borderRadius: 20 }}\r\n                source={{ uri: images[0] }}\r\n              />\r\n            );\r\n            setPDF(<GeneratePDF quantity={data.quantity} images={images} />);\r\n          });\r\n        }}\r\n        validationSchema={loginSchema}\r\n      >\r\n        {({ handleSubmit, isValid }) => (\r\n          <View style={styles.loginContainer}>\r\n            <Text>How many QR Codes do you need? (example: 8)</Text>\r\n            <Field\r\n              component={CustomInput}\r\n              name=\"quantity\"\r\n              placeholder=\"1\"\r\n              type=\"number\"\r\n              min=\"1\"\r\n              max=\"30\"\r\n            />\r\n\r\n            {/*<input style={{margin:20,padding:15}} type=\"number\" min=\"1\" max=\"30\" name=\"quantity\" placeholder=\"How many QR Codes do you need? (example: 8)\" />*/}\r\n\r\n            {/*isValid?\"true\":\"false\"*/}\r\n            <Button\r\n              onPress={handleSubmit}\r\n              title=\"Ask QR Code Now\"\r\n              color=\"#841584\"\r\n              accessibilityLabel=\"Generate A Usable QRCode\"\r\n              disabled={!isValid}\r\n            />\r\n          </View>\r\n        )}\r\n      </Formik>\r\n      <div>{QRImage}</div>\r\n\r\n      <View>{PDF}</View>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n  },\r\n  loginContainer: {\r\n    width: \"30%\",\r\n    alignItems: \"center\",\r\n    backgroundColor: \"white\",\r\n    padding: 10,\r\n    elevation: 10,\r\n    backgroundColor: \"#e6e6e6\",\r\n    justifyContent: \"center\",\r\n  },\r\n  QR: {\r\n    height: 100,\r\n    scale: 0.5,\r\n  },\r\n});\r\n\r\nexport default Home;\r\n"]},"metadata":{},"sourceType":"module"}
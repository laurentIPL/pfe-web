{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\DJsimon93\\\\Desktop\\\\IPL\\\\bloc 3\\\\PFE\\\\PFE\\\\Web_app\\\\src\\\\components\\\\Home.js\";\n\nimport React, { useState } from \"react\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Service from \"../services/Service\";\nimport CustomInput from \"./CustomInput\";\nimport { Formik, Field } from \"formik\";\nimport * as yup from \"yup\";\nimport GeneratePDF from \"./GeneratePDF\";\nvar loginSchema = yup.object({\n  quantity: yup.number().required(\"quantity is required\"),\n  quantity: yup.number().typeError(\"That doesn't look like a number\")\n});\n\nvar Home = function Home() {\n  var _useState = useState(React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 41\n    }\n  })),\n      _useState2 = _slicedToArray(_useState, 2),\n      QRImage = _useState2[0],\n      setQRImage = _useState2[1];\n\n  var _useState3 = useState(React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 43\n    }\n  })),\n      _useState4 = _slicedToArray(_useState3, 2),\n      QRButton = _useState4[0],\n      setQRButton = _useState4[1];\n\n  var _useState5 = useState(React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 33\n    }\n  })),\n      _useState6 = _slicedToArray(_useState5, 2),\n      PDF = _useState6[0],\n      setPDF = _useState6[1];\n\n  var _useState7 = useState(0),\n      _useState8 = _slicedToArray(_useState7, 2),\n      FlagPDF = _useState8[0],\n      setFlagPDF = _useState8[1];\n\n  var handleSubmitPDF = function handleSubmitPDF(testB64String, quantity) {\n    console.log(FlagPDF);\n    if (FlagPDF > 0) setPDF(React.createElement(GeneratePDF, {\n      quantity: quantity,\n      image: testB64String,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 26\n      }\n    }));\n  };\n\n  return React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }\n  }, React.createElement(Formik, {\n    style: styles.container,\n    initialValues: {\n      quantity: 1\n    },\n    onSubmit: function onSubmit(data, actions) {\n      setQRImage(React.createElement(\"p\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 20\n        }\n      }, \"waiting...\"));\n      Service.askForQR(data).then(function (resp) {\n        var imageStringBase64 = resp.data.image.substring(2, resp.data.image.length - 1);\n        setQRImage(React.createElement(Image, {\n          style: {\n            flex: 0.2,\n            width: 500,\n            height: 500,\n            borderRadius: 20\n          },\n          source: {\n            uri: \"data:image/jpeg;base64,\" + imageStringBase64\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 22\n          }\n        }));\n        setFlagPDF(1);\n        console.log(FlagPDF);\n        setQRButton(React.createElement(Button, {\n          onPress: handleSubmitPDF(\"data:image/jpeg;base64,\" + imageStringBase64, data.quantity),\n          title: \"Generate PDF\",\n          color: \"#FFD700\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 23\n          }\n        }));\n      });\n    },\n    validationSchema: loginSchema,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 6\n    }\n  }, function (_ref) {\n    var handleSubmit = _ref.handleSubmit,\n        isValid = _ref.isValid;\n    return React.createElement(View, {\n      style: styles.loginContainer,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }\n    }, React.createElement(Text, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }\n    }, \"How many QR Codes do you need? (example: 8)\"), React.createElement(Field, {\n      component: CustomInput,\n      name: \"quantity\",\n      placeholder: \"1\",\n      type: \"number\",\n      min: \"1\",\n      max: \"30\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }\n    }), React.createElement(Button, {\n      onPress: handleSubmit,\n      title: \"Ask QR Code Now\",\n      color: \"#841584\",\n      accessibilityLabel: \"Generate A Usable QRCode\",\n      disabled: !isValid,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }\n    }), QRButton);\n  }), React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 5\n    }\n  }, QRImage), React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 5\n    }\n  }, PDF));\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  },\n  loginContainer: {\n    width: \"30%\",\n    alignItems: \"center\",\n    backgroundColor: \"white\",\n    padding: 10,\n    elevation: 10,\n    backgroundColor: \"#e6e6e6\",\n    justifyContent: \"center\"\n  }\n});\nexport default Home;","map":{"version":3,"sources":["C:/Users/DJsimon93/Desktop/IPL/bloc 3/PFE/PFE/Web_app/src/components/Home.js"],"names":["React","useState","Service","CustomInput","Formik","Field","yup","GeneratePDF","loginSchema","object","quantity","number","required","typeError","Home","QRImage","setQRImage","QRButton","setQRButton","PDF","setPDF","FlagPDF","setFlagPDF","handleSubmitPDF","testB64String","console","log","styles","container","data","actions","askForQR","then","resp","imageStringBase64","image","substring","length","flex","width","height","borderRadius","uri","handleSubmit","isValid","loginContainer","StyleSheet","create","justifyContent","alignItems","backgroundColor","padding","elevation"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport { Button,Image,StyleSheet,View,Text } from 'react-native';\r\nimport Service from \"../services/Service\";\r\nimport CustomInput from \"./CustomInput\";\r\nimport { Formik, Field } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport GeneratePDF from \"./GeneratePDF\";\r\n\r\n\r\n\r\nconst loginSchema = yup.object({\r\n    quantity: yup.number().required(\"quantity is required\"),\r\n    quantity: yup.number().typeError(\"That doesn't look like a number\")\r\n  });\r\n\r\n\r\nconst Home = () => {\r\n\r\n  const [QRImage,setQRImage] = useState(<div></div>);\r\n  const [QRButton,setQRButton] = useState(<div></div>);\r\n  const [PDF,setPDF] = useState(<div></div>);\r\n  const [FlagPDF,setFlagPDF] = useState(0);\r\n\r\n  const handleSubmitPDF = (testB64String,quantity) => {\r\n    console.log(FlagPDF);\r\n    if(FlagPDF>0) setPDF(<GeneratePDF quantity={quantity} image={testB64String}/>)\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n     <Formik\r\n      style={styles.container}\r\n      initialValues={{ quantity: 1 }}\r\n      onSubmit={(data, actions) => {\r\n        \r\n        setQRImage(<p>waiting...</p>);\r\n        Service.askForQR(data).then((resp) =>{\r\n          const imageStringBase64 = resp.data.image.substring(2,resp.data.image.length -1);\r\n          \r\n          setQRImage(<Image style={{ flex: 0.2,width:500, height:500,borderRadius: 20}} source={{uri: `data:image/jpeg;base64,${imageStringBase64}`}}/>);      \r\n          setFlagPDF(1)\r\n          console.log(FlagPDF)\r\n          setQRButton(<Button onPress={handleSubmitPDF(`data:image/jpeg;base64,${imageStringBase64}`,data.quantity)} title=\"Generate PDF\" color=\"#FFD700\"/>)\r\n        }) \r\n      }}\r\n      validationSchema={loginSchema}\r\n    >\r\n      {({ handleSubmit, isValid }) => (\r\n        <View style={styles.loginContainer}>\r\n          <Text>How many QR Codes do you need? (example: 8)</Text>\r\n          <Field component={CustomInput} name=\"quantity\" placeholder=\"1\"  type=\"number\" min=\"1\" max=\"30\"/> \r\n          \r\n          {/*<input style={{margin:20,padding:15}} type=\"number\" min=\"1\" max=\"30\" name=\"quantity\" placeholder=\"How many QR Codes do you need? (example: 8)\" />*/}\r\n          \r\n        {/*isValid?\"true\":\"false\"*/}\r\n        <Button\r\n            onPress={handleSubmit}\r\n            title=\"Ask QR Code Now\"\r\n            color=\"#841584\"\r\n            accessibilityLabel=\"Generate A Usable QRCode\"\r\n            disabled= {!isValid}  \r\n        />\r\n        {QRButton}\r\n        </View>\r\n      )}\r\n    </Formik>    \r\n     \r\n\r\n    <div>{QRImage}</div>\r\n    <div>{PDF}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n      justifyContent: \"center\",\r\n      alignItems: \"center\",\r\n    },\r\n    loginContainer: {\r\n      width: \"30%\",\r\n      alignItems: \"center\",\r\n      backgroundColor: \"white\",\r\n      padding: 10,\r\n      elevation: 10,\r\n      backgroundColor: \"#e6e6e6\",\r\n      justifyContent: \"center\",\r\n    },\r\n  });\r\n  \r\n\r\nexport default Home;"]},"metadata":{},"sourceType":"module"}
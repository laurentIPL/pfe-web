{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\Laurent\\\\PFE\\\\web_app\\\\src\\\\components\\\\CreateQRCodeContainer\\\\GeneratePDF.js\";\n\nimport React, { useState } from \"react\";\nimport { Document, Page, Image, Text, View, StyleSheet } from \"@react-pdf/renderer\";\nimport ReactDOM from \"react-dom\";\nimport test from \"../../assets/icon.png\";\nimport { PDFViewer, PDFDownloadLink } from \"@react-pdf/renderer\";\n\nvar GeneratePDF = function GeneratePDF(_ref) {\n  var quantity = _ref.quantity,\n      images = _ref.images;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      submitted = _useState2[0],\n      setSubmitted = _useState2[1];\n\n  var CurrentPage = 1;\n  var CurrentPageString = \"Page \" + CurrentPage + \"/\" + quantity;\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      MyPages = _useState4[0],\n      setMyPages = _useState4[1];\n\n  if (!submitted) {\n    var testPages = [];\n\n    for (var i = 0; i < quantity; i++) {\n      CurrentPageString = \"Page \" + CurrentPage + \"/\" + quantity;\n      testPages.push(React.createElement(Page, {\n        key: i,\n        size: \"A4\",\n        style: styles.page,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 9\n        }\n      }, React.createElement(View, {\n        style: styles.section,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 11\n        }\n      }, React.createElement(Text, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 13\n        }\n      }, \"Scan me to save lives!!\"), React.createElement(Image, {\n        style: styles.image,\n        source: images[i],\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 13\n        }\n      }), React.createElement(Text, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 13\n        }\n      }, CurrentPageString))));\n      CurrentPage++;\n    }\n\n    setMyPages(testPages);\n    setSubmitted(true);\n  }\n\n  var MyDoc = function MyDoc() {\n    return React.createElement(Document, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 23\n      }\n    }, MyPages.map(function (page) {\n      return page;\n    }));\n  };\n\n  return React.createElement(PDFDownloadLink, {\n    document: React.createElement(MyDoc, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 32\n      }\n    }),\n    fileName: \"SaveLives.pdf\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }\n  }, function (_ref2) {\n    var blob = _ref2.blob,\n        url = _ref2.url,\n        loading = _ref2.loading,\n        error = _ref2.error;\n    return loading ? \"Loading document...\" : \"Download now!\";\n  });\n};\n\nvar styles = StyleSheet.create({\n  page: {\n    flexDirection: \"row\",\n    width: \"100%\",\n    textAlign: \"center\"\n  },\n  image: {\n    display: \"block\",\n    marginLeft: \"auto\",\n    marginRight: \"auto\",\n    width: \"50%\",\n    padding: 10,\n    backgroundColor: \"red\",\n    objectFit: \"cover\"\n  },\n  section: {\n    width: \"100%\",\n    height: \"100%\",\n    flexGrow: 1\n  },\n  QR: {\n    height: 500,\n    scale: 0.5\n  },\n  footer: {\n    height: 100\n  }\n});\nReactDOM.render(React.createElement(GeneratePDF, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 17\n  }\n}), document.getElementById(\"root\"));\nexport default GeneratePDF;","map":{"version":3,"sources":["C:/Users/Laurent/PFE/web_app/src/components/CreateQRCodeContainer/GeneratePDF.js"],"names":["React","useState","Document","Page","Image","Text","View","StyleSheet","ReactDOM","test","PDFViewer","PDFDownloadLink","GeneratePDF","quantity","images","submitted","setSubmitted","CurrentPage","CurrentPageString","MyPages","setMyPages","testPages","i","push","styles","page","section","image","MyDoc","map","blob","url","loading","error","create","flexDirection","width","textAlign","display","marginLeft","marginRight","padding","backgroundColor","objectFit","height","flexGrow","QR","scale","footer","render","document","getElementById"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport {\r\n  Document,\r\n  Page,\r\n  Image,\r\n  Text,\r\n  View,\r\n  StyleSheet,\r\n} from \"@react-pdf/renderer\";\r\nimport ReactDOM from \"react-dom\";\r\nimport test from \"assets/icon.png\";\r\nimport { PDFViewer, PDFDownloadLink } from \"@react-pdf/renderer\";\r\n\r\nconst GeneratePDF = ({ quantity, images }) => {\r\n  const [submitted, setSubmitted] = useState(false);\r\n\r\n  var CurrentPage = 1;\r\n  var CurrentPageString = `Page ${CurrentPage}/${quantity}`;\r\n\r\n  const [MyPages, setMyPages] = useState([]);\r\n\r\n  if (!submitted) {\r\n    var testPages = [];\r\n    for (var i = 0; i < quantity; i++) {\r\n      CurrentPageString = `Page ${CurrentPage}/${quantity}`;\r\n      testPages.push(\r\n        <Page key={i} size=\"A4\" style={styles.page}>\r\n          <View style={styles.section}>\r\n            <Text>Scan me to save lives!!</Text>\r\n            <Image style={styles.image} source={images[i]} />\r\n            <Text>{CurrentPageString}</Text>\r\n          </View>\r\n        </Page>\r\n      );\r\n\r\n      CurrentPage++;\r\n    }\r\n    setMyPages(testPages);\r\n    setSubmitted(true);\r\n  }\r\n\r\n  const MyDoc = () => <Document>{MyPages.map((page) => page)}</Document>;\r\n\r\n  return (\r\n    <PDFDownloadLink document={<MyDoc />} fileName=\"SaveLives.pdf\">\r\n      {({ blob, url, loading, error }) =>\r\n        loading ? \"Loading document...\" : \"Download now!\"\r\n      }\r\n    </PDFDownloadLink>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  page: {\r\n    flexDirection: \"row\",\r\n    width: \"100%\",\r\n    textAlign: \"center\",\r\n  },\r\n  image: {\r\n    display: \"block\",\r\n    marginLeft: \"auto\",\r\n    marginRight: \"auto\",\r\n    width: \"50%\",\r\n    padding: 10,\r\n    backgroundColor: \"red\",\r\n    objectFit: \"cover\",\r\n  },\r\n  section: {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    flexGrow: 1,\r\n  },\r\n  QR: {\r\n    height: 500,\r\n    scale: 0.5,\r\n  },\r\n  footer: {\r\n    height: 100,\r\n  },\r\n});\r\n\r\nReactDOM.render(<GeneratePDF />, document.getElementById(\"root\"));\r\nexport default GeneratePDF;\r\n"]},"metadata":{},"sourceType":"module"}
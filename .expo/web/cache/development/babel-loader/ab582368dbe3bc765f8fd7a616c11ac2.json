{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\Laurent\\\\PFE\\\\Web_app\\\\src\\\\components\\\\AuthForm\\\\LoginForm.js\";\n\nimport React from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { Formik, Field } from \"formik\";\nimport * as yup from \"yup\";\nimport AuthService from \"../../services/authService\";\nimport CustomInput from \"./CustomInput\";\nimport { Button, Card, Title } from \"react-native-paper\";\nvar loginSchema = yup.object({\n  email: yup.string().required(\"Email is required\"),\n  password: yup.string().required(\"Password is required\")\n});\n\nvar LoginForm = function LoginForm(_ref) {\n  var setShowRegisterForm = _ref.setShowRegisterForm;\n  return React.createElement(Formik, {\n    initialValues: {\n      email: \"\",\n      password: \"\"\n    },\n    onSubmit: function onSubmit(data, actions) {\n      console.log(data);\n      AuthService.authenticateUser(data).then(function (resp) {\n        return console.log(resp);\n      });\n    },\n    validationSchema: loginSchema,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 5\n    }\n  }, function (_ref2) {\n    var handleSubmit = _ref2.handleSubmit,\n        isValid = _ref2.isValid;\n    return React.createElement(Card.Content, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }\n    }, React.createElement(Title, {\n      style: styles.title,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }\n    }, \"Connectez vous\"), React.createElement(Field, {\n      component: CustomInput,\n      name: \"Email\",\n      label: \"Email\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }\n    }), React.createElement(Field, {\n      component: CustomInput,\n      type: \"password\",\n      name: \"Password\",\n      label: \"Password\",\n      secureTextEntry: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }\n    }), React.createElement(Card.Actions, {\n      style: styles.buttons,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }\n    }, React.createElement(Button, {\n      mode: \"flat\",\n      onPress: function onPress() {\n        return setShowRegisterForm(true);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 13\n      }\n    }, \"Cr\\xE9er un compte\"), React.createElement(Button, {\n      mode: \"contained\",\n      onPress: handleSubmit,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 13\n      }\n    }, \"Se connecter\")));\n  });\n};\n\nvar styles = StyleSheet.create({\n  textInput: {\n    height: 40,\n    margin: 10,\n    backgroundColor: \"white\"\n  },\n  title: {\n    textAlign: \"center\"\n  },\n  buttons: {\n    justifyContent: \"space-between\"\n  }\n});\nexport default LoginForm;","map":{"version":3,"sources":["C:/Users/Laurent/PFE/Web_app/src/components/AuthForm/LoginForm.js"],"names":["React","Formik","Field","yup","AuthService","CustomInput","Button","Card","Title","loginSchema","object","email","string","required","password","LoginForm","setShowRegisterForm","data","actions","console","log","authenticateUser","then","resp","handleSubmit","isValid","styles","title","buttons","StyleSheet","create","textInput","height","margin","backgroundColor","textAlign","justifyContent"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,SAASC,MAAT,EAAiBC,KAAjB,QAA8B,QAA9B;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,OAAOC,WAAP;AACA,OAAOC,WAAP;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,KAAvB,QAAoC,oBAApC;AAEA,IAAMC,WAAW,GAAGN,GAAG,CAACO,MAAJ,CAAW;AAC7BC,EAAAA,KAAK,EAAER,GAAG,CAACS,MAAJ,GAAaC,QAAb,CAAsB,mBAAtB,CADsB;AAE7BC,EAAAA,QAAQ,EAAEX,GAAG,CAACS,MAAJ,GAAaC,QAAb,CAAsB,sBAAtB;AAFmB,CAAX,CAApB;;AAKA,IAAME,SAAS,GAAG,SAAZA,SAAY,OAA6B;AAAA,MAA1BC,mBAA0B,QAA1BA,mBAA0B;AAC7C,SACE,oBAAC,MAAD;AACE,IAAA,aAAa,EAAE;AAAEL,MAAAA,KAAK,EAAE,EAAT;AAAaG,MAAAA,QAAQ,EAAE;AAAvB,KADjB;AAEE,IAAA,QAAQ,EAAE,kBAACG,IAAD,EAAOC,OAAP,EAAmB;AAC3BC,MAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACAb,MAAAA,WAAW,CAACiB,gBAAZ,CAA6BJ,IAA7B,EAAmCK,IAAnC,CAAwC,UAACC,IAAD;AAAA,eAAUJ,OAAO,CAACC,GAAR,CAAYG,IAAZ,CAAV;AAAA,OAAxC;AACD,KALH;AAME,IAAA,gBAAgB,EAAEd,WANpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQG;AAAA,QAAGe,YAAH,SAAGA,YAAH;AAAA,QAAiBC,OAAjB,SAAiBA,OAAjB;AAAA,WACC,oBAAC,IAAD,CAAM,OAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAQE,oBAAC,KAAD;AAAO,MAAA,KAAK,EAAEC,MAAM,CAACC,KAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBARF,EASE,oBAAC,KAAD;AAAO,MAAA,SAAS,EAAEtB,WAAlB;AAA+B,MAAA,IAAI,EAAC,OAApC;AAA4C,MAAA,KAAK,EAAC,OAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MATF,EAUE,oBAAC,KAAD;AACE,MAAA,SAAS,EAAEA,WADb;AAEE,MAAA,IAAI,EAAC,UAFP;AAGE,MAAA,IAAI,EAAC,UAHP;AAIE,MAAA,KAAK,EAAC,UAJR;AAKE,MAAA,eAAe,MALjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAVF,EAiBE,oBAAC,IAAD,CAAM,OAAN;AAAc,MAAA,KAAK,EAAEqB,MAAM,CAACE,OAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,MAAD;AAAQ,MAAA,IAAI,EAAC,MAAb;AAAoB,MAAA,OAAO,EAAE;AAAA,eAAMZ,mBAAmB,CAAC,IAAD,CAAzB;AAAA,OAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BADF,EAIE,oBAAC,MAAD;AAAQ,MAAA,IAAI,EAAC,WAAb;AAAyB,MAAA,OAAO,EAAEQ,YAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAJF,CAjBF,CADD;AAAA,GARH,CADF;AAuCD,CAxCD;;AA0CA,IAAME,MAAM,GAAGG,UAAU,CAACC,MAAX,CAAkB;AAC/BC,EAAAA,SAAS,EAAE;AACTC,IAAAA,MAAM,EAAE,EADC;AAETC,IAAAA,MAAM,EAAE,EAFC;AAGTC,IAAAA,eAAe,EAAE;AAHR,GADoB;AAM/BP,EAAAA,KAAK,EAAE;AACLQ,IAAAA,SAAS,EAAE;AADN,GANwB;AAS/BP,EAAAA,OAAO,EAAE;AACPQ,IAAAA,cAAc,EAAE;AADT;AATsB,CAAlB,CAAf;AAcA,eAAerB,SAAf","sourcesContent":["import React from \"react\";\r\nimport { StyleSheet } from \"react-native\";\r\nimport { Formik, Field } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport AuthService from \"services/authService\";\r\nimport CustomInput from \"components/AuthForm/CustomInput\";\r\nimport { Button, Card, Title } from \"react-native-paper\";\r\n\r\nconst loginSchema = yup.object({\r\n  email: yup.string().required(\"Email is required\"),\r\n  password: yup.string().required(\"Password is required\"),\r\n});\r\n\r\nconst LoginForm = ({ setShowRegisterForm }) => {\r\n  return (\r\n    <Formik\r\n      initialValues={{ email: \"\", password: \"\" }}\r\n      onSubmit={(data, actions) => {\r\n        console.log(data);\r\n        AuthService.authenticateUser(data).then((resp) => console.log(resp));\r\n      }}\r\n      validationSchema={loginSchema}\r\n    >\r\n      {({ handleSubmit, isValid }) => (\r\n        <Card.Content>\r\n          {/*          <TextInput\r\n            mode=\"outlined\"\r\n            style={styles.textInput}\r\n            theme={{\r\n              colors: { primary: \"green\", underlineColor: \"transparent\" },\r\n            }}\r\n          /> */}\r\n          <Title style={styles.title}>Connectez vous</Title>\r\n          <Field component={CustomInput} name=\"Email\" label=\"Email\" />\r\n          <Field\r\n            component={CustomInput}\r\n            type=\"password\"\r\n            name=\"Password\"\r\n            label=\"Password\"\r\n            secureTextEntry\r\n          />\r\n          <Card.Actions style={styles.buttons}>\r\n            <Button mode=\"flat\" onPress={() => setShowRegisterForm(true)}>\r\n              Cr√©er un compte\r\n            </Button>\r\n            <Button mode=\"contained\" onPress={handleSubmit}>\r\n              Se connecter\r\n            </Button>\r\n          </Card.Actions>\r\n        </Card.Content>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  textInput: {\r\n    height: 40,\r\n    margin: 10,\r\n    backgroundColor: \"white\",\r\n  },\r\n  title: {\r\n    textAlign: \"center\",\r\n  },\r\n  buttons: {\r\n    justifyContent: \"space-between\",\r\n  },\r\n});\r\n\r\nexport default LoginForm;\r\n"]},"metadata":{},"sourceType":"module"}
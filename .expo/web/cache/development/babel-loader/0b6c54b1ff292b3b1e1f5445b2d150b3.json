{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\Laurent\\\\PFE\\\\web_app\\\\src\\\\components\\\\CreateQRCodeContainer\\\\CreateQRCodeContainer.js\";\n\nimport React, { useState, useEffect } from \"react\";\nimport AskQRCodeForm from \"./AskQRCodeForm\";\nimport DisplayQRCodes from \"./DisplayQRCodes\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Service from \"../../services/Service\";\nimport { PDFDownloadLink } from \"@react-pdf/renderer\";\nimport PDFDocument from \"./PDFDocument\";\nimport { Button, ActivityIndicator } from \"react-native-paper\";\n\nvar CreateQRCodeContainer = function CreateQRCodeContainer() {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      images = _useState2[0],\n      setImages = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      loading = _useState4[0],\n      setLoading = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      showDownloadLink = _useState6[0],\n      setShowDownloadLink = _useState6[1];\n\n  var handleFormSubmit = function handleFormSubmit(data) {\n    setLoading(true);\n    Service.askForQR(data).then(function (resp) {\n      var image = resp.data.images;\n      var images = [];\n\n      for (var i = 0; i < image.length; i++) {\n        images.push(\"data:image/png;base64,\" + image[i].substring(2, image[i].length - 1));\n      }\n\n      setImages(images);\n      setShowDownloadLink(true);\n      setLoading(false);\n    });\n  };\n\n  return React.createElement(View, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }\n  }, React.createElement(AskQRCodeForm, {\n    handleFormSubmit: handleFormSubmit,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }\n  }), showDownloadLink && React.createElement(PDFDownloadLink, {\n    document: React.createElement(PDFDocument, {\n      data: images,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 21\n      }\n    }),\n    fileName: \"SaveLives.pdf\",\n    style: {\n      textDecoration: \"none\",\n      padding: \"10px\",\n      color: \"#4a4a4a\",\n      backgroundColor: \"#f2f2f2\",\n      border: \"1px solid #4a4a4a\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }\n  }, function (_ref) {\n    var blob = _ref.blob,\n        url = _ref.url,\n        loading = _ref.loading,\n        error = _ref.error;\n    return loading ? \"Loading document...\" : \"Download Pdf\";\n  }));\n};\n\nexport default CreateQRCodeContainer;","map":{"version":3,"sources":["C:/Users/Laurent/PFE/web_app/src/components/CreateQRCodeContainer/CreateQRCodeContainer.js"],"names":["React","useState","useEffect","AskQRCodeForm","DisplayQRCodes","Service","PDFDownloadLink","PDFDocument","Button","ActivityIndicator","CreateQRCodeContainer","images","setImages","loading","setLoading","showDownloadLink","setShowDownloadLink","handleFormSubmit","data","askForQR","then","resp","image","i","length","push","substring","textDecoration","padding","color","backgroundColor","border","blob","url","error"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,aAAP;AACA,OAAOC,cAAP;;;;AAEA,OAAOC,OAAP;AACA,SAASC,eAAT,QAAgC,qBAAhC;AACA,OAAOC,WAAP;AACA,SAASC,MAAT,EAAiBC,iBAAjB,QAA0C,oBAA1C;;AAEA,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB,GAAM;AAAA,kBACNT,QAAQ,CAAC,EAAD,CADF;AAAA;AAAA,MAC3BU,MAD2B;AAAA,MACnBC,SADmB;;AAAA,mBAEJX,QAAQ,CAAC,KAAD,CAFJ;AAAA;AAAA,MAE3BY,OAF2B;AAAA,MAElBC,UAFkB;;AAAA,mBAGcb,QAAQ,CAAC,KAAD,CAHtB;AAAA;AAAA,MAG3Bc,gBAH2B;AAAA,MAGTC,mBAHS;;AAKlC,MAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,IAAD,EAAU;AACjCJ,IAAAA,UAAU,CAAC,IAAD,CAAV;AAEAT,IAAAA,OAAO,CAACc,QAAR,CAAiBD,IAAjB,EAAuBE,IAAvB,CAA4B,UAACC,IAAD,EAAU;AACpC,UAAMC,KAAK,GAAGD,IAAI,CAACH,IAAL,CAAUP,MAAxB;AACA,UAAIA,MAAM,GAAG,EAAb;;AACA,WAAK,IAAIY,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,KAAK,CAACE,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrCZ,QAAAA,MAAM,CAACc,IAAP,CACE,2BAA2BH,KAAK,CAACC,CAAD,CAAL,CAASG,SAAT,CAAmB,CAAnB,EAAsBJ,KAAK,CAACC,CAAD,CAAL,CAASC,MAAT,GAAkB,CAAxC,CAD7B;AAGD;;AACDZ,MAAAA,SAAS,CAACD,MAAD,CAAT;AACAK,MAAAA,mBAAmB,CAAC,IAAD,CAAnB;AACAF,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KAXD;AAYD,GAfD;;AAgBA,SACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,aAAD;AAAe,IAAA,gBAAgB,EAAEG,gBAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAIGF,gBAAgB,IACf,oBAAC,eAAD;AACE,IAAA,QAAQ,EAAE,oBAAC,WAAD;AAAa,MAAA,IAAI,EAAEJ,MAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADZ;AAEE,IAAA,QAAQ,EAAC,eAFX;AAGE,IAAA,KAAK,EAAE;AACLgB,MAAAA,cAAc,EAAE,MADX;AAELC,MAAAA,OAAO,EAAE,MAFJ;AAGLC,MAAAA,KAAK,EAAE,SAHF;AAILC,MAAAA,eAAe,EAAE,SAJZ;AAKLC,MAAAA,MAAM,EAAE;AALH,KAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAWG;AAAA,QAAGC,IAAH,QAAGA,IAAH;AAAA,QAASC,GAAT,QAASA,GAAT;AAAA,QAAcpB,OAAd,QAAcA,OAAd;AAAA,QAAuBqB,KAAvB,QAAuBA,KAAvB;AAAA,WACCrB,OAAO,GAAG,qBAAH,GAA2B,cADnC;AAAA,GAXH,CALJ,CADF;AAwBD,CA7CD;;AA+CA,eAAeH,qBAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport AskQRCodeForm from \"components/CreateQRCodeContainer/AskQRCodeForm\";\r\nimport DisplayQRCodes from \"components/CreateQRCodeContainer/DisplayQRCodes\";\r\nimport { StyleSheet, View, Image } from \"react-native\";\r\nimport Service from \"services/Service\";\r\nimport { PDFDownloadLink } from \"@react-pdf/renderer\";\r\nimport PDFDocument from \"components/CreateQRCodeContainer/PDFDocument\";\r\nimport { Button, ActivityIndicator } from \"react-native-paper\";\r\n\r\nconst CreateQRCodeContainer = () => {\r\n  const [images, setImages] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [showDownloadLink, setShowDownloadLink] = useState(false);\r\n\r\n  const handleFormSubmit = (data) => {\r\n    setLoading(true);\r\n\r\n    Service.askForQR(data).then((resp) => {\r\n      const image = resp.data.images;\r\n      var images = [];\r\n      for (var i = 0; i < image.length; i++) {\r\n        images.push(\r\n          \"data:image/png;base64,\" + image[i].substring(2, image[i].length - 1)\r\n        );\r\n      }\r\n      setImages(images);\r\n      setShowDownloadLink(true);\r\n      setLoading(false);\r\n    });\r\n  };\r\n  return (\r\n    <View>\r\n      <AskQRCodeForm handleFormSubmit={handleFormSubmit} />\r\n      {/*       <ActivityIndicator animating={loading} size=\"medium\" />\r\n       */}\r\n      {showDownloadLink && (\r\n        <PDFDownloadLink\r\n          document={<PDFDocument data={images} />}\r\n          fileName=\"SaveLives.pdf\"\r\n          style={{\r\n            textDecoration: \"none\",\r\n            padding: \"10px\",\r\n            color: \"#4a4a4a\",\r\n            backgroundColor: \"#f2f2f2\",\r\n            border: \"1px solid #4a4a4a\",\r\n          }}\r\n        >\r\n          {({ blob, url, loading, error }) =>\r\n            loading ? \"Loading document...\" : \"Download Pdf\"\r\n          }\r\n        </PDFDownloadLink>\r\n      )}\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default CreateQRCodeContainer;\r\n"]},"metadata":{},"sourceType":"module"}
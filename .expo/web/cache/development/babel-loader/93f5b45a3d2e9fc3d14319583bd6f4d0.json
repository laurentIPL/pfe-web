{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\Laurent\\\\PFE\\\\Web_app\\\\src\\\\components\\\\CreateQRCodeContainer\\\\CreateQRCodeContainer.js\";\n\nimport React, { useState, useEffect } from \"react\";\nimport AskQRCodeForm from \"./AskQRCodeForm\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Service from \"../../services/Service\";\nimport { PDFDownloadLink } from \"@react-pdf/renderer\";\nimport PDFDocument from \"./PDFDocument\";\nimport { Card, ActivityIndicator, Button } from \"react-native-paper\";\n\nvar CreateQRCodeContainer = function CreateQRCodeContainer(_ref) {\n  var setQRList = _ref.setQRList,\n      QRList = _ref.QRList,\n      handleList = _ref.handleList;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      images = _useState2[0],\n      setImages = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      showDownloadLink = _useState4[0],\n      setShowDownloadLink = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      charging = _useState6[0],\n      setCharging = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      received = _useState8[0],\n      setReceived = _useState8[1];\n\n  var _useState9 = useState(\"\"),\n      _useState10 = _slicedToArray(_useState9, 2),\n      error = _useState10[0],\n      setError = _useState10[1];\n\n  var handleFormSubmit = function handleFormSubmit(data) {\n    setShowDownloadLink(false);\n    setCharging(true);\n    Service.askForQR(data).then(function (resp) {\n      console.log(resp.data);\n      var array = [];\n\n      for (var i = 0; i < resp.data.images.length; i++) {\n        var image = resp.data.images[i];\n        var count = 0;\n        var name = resp.data.names[i];\n        array.push({\n          image: \"data:image/png;base64,\" + image.substring(2, image.length - 1),\n          count: count,\n          name: name\n        });\n      }\n\n      handleList();\n      setImages(array);\n      setCharging(false);\n      setShowDownloadLink(true);\n      setReceived(false);\n      setError(\"\");\n    }).catch(function (error) {\n      console.log(error);\n      setCharging(false);\n      setShowDownloadLink(false);\n      setReceived(true);\n      setError(error.response.data.response);\n    });\n  };\n\n  return React.createElement(Card, {\n    style: styles.cardContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }\n  }, React.createElement(Card.Content, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }, React.createElement(AskQRCodeForm, {\n    handleFormSubmit: handleFormSubmit,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }), showDownloadLink ? React.createElement(Button, {\n    style: styles.downloadButton,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 11\n    }\n  }, React.createElement(PDFDownloadLink, {\n    document: React.createElement(PDFDocument, {\n      data: images,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 25\n      }\n    }),\n    fileName: \"SaveLives.pdf\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }\n  }, function (_ref2) {\n    var blob = _ref2.blob,\n        url = _ref2.url,\n        loading = _ref2.loading,\n        error = _ref2.error;\n    return loading ? \"Loading document...\" : \"Download Pdf\";\n  })) : React.createElement(ActivityIndicator, {\n    animating: charging,\n    size: \"small\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 11\n    }\n  }), received && React.createElement(Text, {\n    style: styles.text,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 22\n    }\n  }, \"error:\" + error)));\n};\n\nvar styles = StyleSheet.create({\n  cardContainer: {\n    marginLeft: \"auto\",\n    marginRight: \"auto\",\n    paddingTop: \"20px\",\n    paddingBottom: \"20px\",\n    borderColor: \"#D3D3D3\",\n    borderWidth: \"1px\",\n    borderRadius: \"10px\",\n    boxShadow: \"0px 0px 30px rgba(0, 0, 0, 0.1)\",\n    transition: \"0.1s ease\"\n  },\n  downloadButton: {},\n  text: {\n    textAlign: \"center\",\n    fontSize: 10,\n    color: \"red\"\n  }\n});\nexport default CreateQRCodeContainer;","map":{"version":3,"sources":["C:/Users/Laurent/PFE/Web_app/src/components/CreateQRCodeContainer/CreateQRCodeContainer.js"],"names":["React","useState","useEffect","AskQRCodeForm","Service","PDFDownloadLink","PDFDocument","Card","ActivityIndicator","Button","CreateQRCodeContainer","setQRList","QRList","handleList","images","setImages","showDownloadLink","setShowDownloadLink","charging","setCharging","received","setReceived","error","setError","handleFormSubmit","data","askForQR","then","resp","console","log","array","i","length","image","count","name","names","push","substring","catch","response","styles","cardContainer","downloadButton","blob","url","loading","text","StyleSheet","create","marginLeft","marginRight","paddingTop","paddingBottom","borderColor","borderWidth","borderRadius","boxShadow","transition","textAlign","fontSize","color"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport AskQRCodeForm from \"components/CreateQRCodeContainer/AskQRCodeForm\";\r\nimport { StyleSheet, View, Image, Text } from \"react-native\";\r\nimport Service from \"services/Service\";\r\nimport { PDFDownloadLink } from \"@react-pdf/renderer\";\r\nimport PDFDocument from \"components/CreateQRCodeContainer/PDFDocument\";\r\nimport { Card, ActivityIndicator, Button } from \"react-native-paper\";\r\n\r\nconst CreateQRCodeContainer = ({ setQRList, QRList, handleList }) => {\r\n  const [images, setImages] = useState([]);\r\n  const [showDownloadLink, setShowDownloadLink] = useState(false);\r\n  const [charging, setCharging] = useState(false);\r\n  const [received, setReceived] = useState(false);\r\n  const [error, setError] = useState(\"\");\r\n\r\n  const handleFormSubmit = (data) => {\r\n    setShowDownloadLink(false);\r\n    setCharging(true);\r\n\r\n    Service.askForQR(data)\r\n      .then((resp) => {\r\n        console.log(resp.data);\r\n        var array = [];\r\n        for (var i = 0; i < resp.data.images.length; i++) {\r\n          const image = resp.data.images[i];\r\n          const count = 0;\r\n          const name = resp.data.names[i];\r\n          array.push({\r\n            image:\r\n              \"data:image/png;base64,\" + image.substring(2, image.length - 1),\r\n            count: count,\r\n            name: name,\r\n          });\r\n        }\r\n        handleList();\r\n        //setQRList([...QRList, ...array]);\r\n        setImages(array);\r\n        setCharging(false);\r\n        setShowDownloadLink(true);\r\n        setReceived(false);\r\n        setError(\"\");\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n        setCharging(false);\r\n        setShowDownloadLink(false);\r\n        setReceived(true);\r\n        setError(error.response.data.response);\r\n      });\r\n  };\r\n  return (\r\n    <Card style={styles.cardContainer}>\r\n      <Card.Content>\r\n        <AskQRCodeForm handleFormSubmit={handleFormSubmit} />\r\n        {showDownloadLink ? (\r\n          <Button style={styles.downloadButton}>\r\n            <PDFDownloadLink\r\n              document={<PDFDocument data={images} />}\r\n              fileName=\"SaveLives.pdf\"\r\n            >\r\n              {({ blob, url, loading, error }) =>\r\n                loading ? \"Loading document...\" : \"Download Pdf\"\r\n              }\r\n            </PDFDownloadLink>\r\n          </Button>\r\n        ) : (\r\n          <ActivityIndicator animating={charging} size=\"small\" />\r\n        )}\r\n        {received && <Text style={styles.text}>{`error:${error}`}</Text>}\r\n      </Card.Content>\r\n    </Card>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  cardContainer: {\r\n    marginLeft: \"auto\",\r\n    marginRight: \"auto\",\r\n    paddingTop: \"20px\",\r\n    paddingBottom: \"20px\",\r\n    borderColor: \"#D3D3D3\",\r\n    borderWidth: \"1px\",\r\n    borderRadius: \"10px\",\r\n    boxShadow: \"0px 0px 30px rgba(0, 0, 0, 0.1)\",\r\n    transition: \"0.1s ease\",\r\n  },\r\n  downloadButton: {},\r\n  text: {\r\n    textAlign: \"center\",\r\n    fontSize: 10,\r\n    color: \"red\",\r\n  },\r\n});\r\n\r\nexport default CreateQRCodeContainer;\r\n"]},"metadata":{},"sourceType":"module"}
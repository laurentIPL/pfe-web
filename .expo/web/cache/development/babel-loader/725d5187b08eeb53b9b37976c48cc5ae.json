{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\Laurent\\\\PFE\\\\Web_app\\\\src\\\\components\\\\CreateQRCode\\\\AskQRCodeForm.js\";\n\nimport React, { useState } from \"react\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Service from \"../../services/Service\";\nimport CustomInput from \"../utils/CustomInput\";\nimport { Formik, Field } from \"formik\";\nimport * as yup from \"yup\";\nimport GeneratePDF from \"./GeneratePDF\";\nimport { Card, Title, Button, ActivityIndicator } from \"react-native-paper\";\nvar loginSchema = yup.object({\n  quantity: yup.number().required(\"quantity is required\"),\n  quantity: yup.number().typeError(\"That doesn't look like a number\")\n});\n\nvar AskQRCodeForm = function AskQRCodeForm(_ref) {\n  var setQRCodes = _ref.setQRCodes,\n      setLoading = _ref.setLoading,\n      loading = _ref.loading;\n\n  var _useState = useState(React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 34\n    }\n  })),\n      _useState2 = _slicedToArray(_useState, 2),\n      PDF = _useState2[0],\n      setPDF = _useState2[1];\n\n  var handleSubmitPDF = function handleSubmitPDF(testB64String, quantity) {\n    setPDF(React.createElement(GeneratePDF, {\n      quantity: quantity,\n      image: testB64String,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 12\n      }\n    }));\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(Formik, {\n    initialValues: {\n      quantity: 1\n    },\n    onSubmit: function onSubmit(data, actions) {\n      setLoading(true);\n      Service.askForQR(data).then(function (resp) {\n        var image = resp.data.images;\n        var images = [];\n\n        for (var i = 0; i < image.length; i++) {\n          images.push(\"data:image/png;base64,\" + image[i].substring(2, image[i].length - 1));\n        }\n\n        setQRCodes(images);\n      });\n    },\n    validationSchema: loginSchema,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }\n  }, function (_ref2) {\n    var handleSubmit = _ref2.handleSubmit,\n        isValid = _ref2.isValid;\n    return React.createElement(Card, {\n      style: styles.cardContainer,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }\n    }, React.createElement(Card.Content, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 13\n      }\n    }, React.createElement(Title, {\n      style: styles.title,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 15\n      }\n    }, \"Combien de QR Code avez-vous besoin ?\"), React.createElement(Field, {\n      component: CustomInput,\n      name: \"quantity\",\n      placeholder: \"1\",\n      type: \"number\",\n      min: \"1\",\n      max: \"30\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 15\n      }\n    }), React.createElement(Card.Actions, {\n      style: styles.button,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 15\n      }\n    }, React.createElement(Button, {\n      mode: \"contained\",\n      onPress: handleSubmit,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }\n    }, \"Ask QR Code Now\"))));\n  }));\n};\n\nvar styles = StyleSheet.create({\n  cardContainer: {\n    marginLeft: \"auto\",\n    marginRight: \"auto\",\n    paddingTop: \"80px\",\n    paddingBottom: \"80px\",\n    borderColor: \"#D3D3D3\",\n    borderWidth: \"1px\",\n    borderRadius: \"10px\"\n  },\n  title: {\n    textAlign: \"center\"\n  },\n  button: {\n    justifyContent: \"center\",\n    textAlign: \"center\"\n  },\n  QR: {\n    height: 100,\n    scale: 0.5\n  }\n});\nexport default AskQRCodeForm;","map":{"version":3,"sources":["C:/Users/Laurent/PFE/Web_app/src/components/CreateQRCode/AskQRCodeForm.js"],"names":["React","useState","Service","CustomInput","Formik","Field","yup","GeneratePDF","Card","Title","Button","ActivityIndicator","loginSchema","object","quantity","number","required","typeError","AskQRCodeForm","setQRCodes","setLoading","loading","PDF","setPDF","handleSubmitPDF","testB64String","data","actions","askForQR","then","resp","image","images","i","length","push","substring","handleSubmit","isValid","styles","cardContainer","title","button","StyleSheet","create","marginLeft","marginRight","paddingTop","paddingBottom","borderColor","borderWidth","borderRadius","textAlign","justifyContent","QR","height","scale"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport { Image, StyleSheet, View } from \"react-native\";\r\nimport Service from \"services/Service\";\r\nimport CustomInput from \"components/utils/CustomInput\";\r\nimport { Formik, Field } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport GeneratePDF from \"./GeneratePDF\";\r\nimport { Card, Title, Button, ActivityIndicator } from \"react-native-paper\";\r\n\r\nconst loginSchema = yup.object({\r\n  quantity: yup.number().required(\"quantity is required\"),\r\n  quantity: yup.number().typeError(\"That doesn't look like a number\"),\r\n});\r\n\r\nconst AskQRCodeForm = ({ setQRCodes, setLoading, loading }) => {\r\n  const [PDF, setPDF] = useState(<div></div>);\r\n\r\n  const handleSubmitPDF = (testB64String, quantity) => {\r\n    setPDF(<GeneratePDF quantity={quantity} image={testB64String} />);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Formik\r\n        initialValues={{ quantity: 1 }}\r\n        onSubmit={(data, actions) => {\r\n          setLoading(true);\r\n          Service.askForQR(data).then((resp) => {\r\n            const image = resp.data.images;\r\n            var images = [];\r\n            for (var i = 0; i < image.length; i++) {\r\n              images.push(\r\n                \"data:image/png;base64,\" +\r\n                  image[i].substring(2, image[i].length - 1)\r\n              );\r\n            }\r\n            setQRCodes(images);\r\n            /* setQRImage(\r\n              <Image\r\n                style={{ flex: 0.2, width: 500, height: 500, borderRadius: 20 }}\r\n                source={{ uri: images[0] }}\r\n              />\r\n            );\r\n            setPDF(<GeneratePDF quantity={data.quantity} images={images} />); */\r\n          });\r\n        }}\r\n        validationSchema={loginSchema}\r\n      >\r\n        {({ handleSubmit, isValid }) => (\r\n          <Card style={styles.cardContainer}>\r\n            <Card.Content>\r\n              <Title style={styles.title}>\r\n                Combien de QR Code avez-vous besoin ?\r\n              </Title>\r\n              <Field\r\n                component={CustomInput}\r\n                name=\"quantity\"\r\n                placeholder=\"1\"\r\n                type=\"number\"\r\n                min=\"1\"\r\n                max=\"30\"\r\n              />\r\n              <Card.Actions style={styles.button}>\r\n                <Button mode=\"contained\" onPress={handleSubmit}>\r\n                  Ask QR Code Now\r\n                </Button>\r\n              </Card.Actions>\r\n            </Card.Content>\r\n          </Card>\r\n        )}\r\n      </Formik>\r\n      {/*       <div>{QRImage}</div>\r\n\r\n      <View>{PDF}</View> */}\r\n    </>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  cardContainer: {\r\n    marginLeft: \"auto\",\r\n    marginRight: \"auto\",\r\n    paddingTop: \"80px\",\r\n    paddingBottom: \"80px\",\r\n    borderColor: \"#D3D3D3\",\r\n    borderWidth: \"1px\",\r\n    borderRadius: \"10px\",\r\n  },\r\n  title: {\r\n    textAlign: \"center\",\r\n  },\r\n  button: {\r\n    justifyContent: \"center\",\r\n    textAlign: \"center\",\r\n  },\r\n  QR: {\r\n    height: 100,\r\n    scale: 0.5,\r\n  },\r\n});\r\n\r\nexport default AskQRCodeForm;\r\n"]},"metadata":{},"sourceType":"module"}
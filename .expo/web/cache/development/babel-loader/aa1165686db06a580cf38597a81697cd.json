{"ast":null,"code":"\"use strict\";\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nvar RNNetworkInfo = NativeModules.RNNetworkInfo;\nvar NetworkInfo = {\n  getSSID: function getSSID() {\n    return _regeneratorRuntime.async(function getSSID$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(RNNetworkInfo.getSSID());\n\n          case 2:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  getBSSID: function getBSSID() {\n    return _regeneratorRuntime.async(function getBSSID$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(RNNetworkInfo.getBSSID());\n\n          case 2:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  getBroadcast: function getBroadcast() {\n    return _regeneratorRuntime.async(function getBroadcast$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return _regeneratorRuntime.awrap(RNNetworkInfo.getBroadcast());\n\n          case 2:\n            return _context3.abrupt(\"return\", _context3.sent);\n\n          case 3:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  getIPAddress: function getIPAddress() {\n    return _regeneratorRuntime.async(function getIPAddress$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return _regeneratorRuntime.awrap(RNNetworkInfo.getIPAddress());\n\n          case 2:\n            return _context4.abrupt(\"return\", _context4.sent);\n\n          case 3:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  getIPV4Address: function getIPV4Address() {\n    var wifiIP;\n    return _regeneratorRuntime.async(function getIPV4Address$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.next = 2;\n            return _regeneratorRuntime.awrap(RNNetworkInfo.getWIFIIPV4Address());\n\n          case 2:\n            wifiIP = _context5.sent;\n\n            if (!(wifiIP && wifiIP !== '0.0.0.0')) {\n              _context5.next = 5;\n              break;\n            }\n\n            return _context5.abrupt(\"return\", wifiIP);\n\n          case 5:\n            _context5.next = 7;\n            return _regeneratorRuntime.awrap(RNNetworkInfo.getIPV4Address());\n\n          case 7:\n            return _context5.abrupt(\"return\", _context5.sent);\n\n          case 8:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  getGatewayIPAddress: function getGatewayIPAddress() {\n    return _regeneratorRuntime.async(function getGatewayIPAddress$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            _context6.next = 2;\n            return _regeneratorRuntime.awrap(RNNetworkInfo.getGatewayIPAddress());\n\n          case 2:\n            return _context6.abrupt(\"return\", _context6.sent);\n\n          case 3:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  getSubnet: function getSubnet() {\n    return _regeneratorRuntime.async(function getSubnet$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            _context7.next = 2;\n            return _regeneratorRuntime.awrap(RNNetworkInfo.getSubnet());\n\n          case 2:\n            return _context7.abrupt(\"return\", _context7.sent);\n\n          case 3:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  getFrequency: function getFrequency() {\n    return _regeneratorRuntime.async(function getFrequency$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            if (!(Platform.OS !== 'android')) {\n              _context8.next = 2;\n              break;\n            }\n\n            return _context8.abrupt(\"return\", null);\n\n          case 2:\n            _context8.next = 4;\n            return _regeneratorRuntime.awrap(RNNetworkInfo.getFrequency());\n\n          case 4:\n            return _context8.abrupt(\"return\", _context8.sent);\n\n          case 5:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n};\nmodule.exports = {\n  NetworkInfo: NetworkInfo\n};","map":{"version":3,"sources":["C:/Users/Codep/Desktop/workspacePFE/PFE/Web_app/node_modules/react-native-network-info/NetworkInfo.js"],"names":["RNNetworkInfo","NativeModules","NetworkInfo","getSSID","getBSSID","getBroadcast","getIPAddress","getIPV4Address","getWIFIIPV4Address","wifiIP","getGatewayIPAddress","getSubnet","getFrequency","Platform","OS","module","exports"],"mappings":"AAAA;;;;;IAGQA,a,GAAkBC,a,CAAlBD,a;AAER,IAAME,WAAW,GAAG;AACZC,EAAAA,OADY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAEHH,aAAa,CAACG,OAAd,EAFG;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKZC,EAAAA,QALY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAMHJ,aAAa,CAACI,QAAd,EANG;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASZC,EAAAA,YATY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAUHL,aAAa,CAACK,YAAd,EAVG;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaZC,EAAAA,YAbY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAcHN,aAAa,CAACM,YAAd,EAdG;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBZC,EAAAA,cAjBY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAkBKP,aAAa,CAACQ,kBAAd,EAlBL;;AAAA;AAkBVC,YAAAA,MAlBU;;AAAA,kBAmBZA,MAAM,IAAIA,MAAM,KAAK,SAnBT;AAAA;AAAA;AAAA;;AAAA,8CAoBPA,MApBO;;AAAA;AAAA;AAAA,6CAuBHT,aAAa,CAACO,cAAd,EAvBG;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA0BZG,EAAAA,mBA1BY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CA2BHV,aAAa,CAACU,mBAAd,EA3BG;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA8BZC,EAAAA,SA9BY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CA+BHX,aAAa,CAACW,SAAd,EA/BG;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkCZC,EAAAA,YAlCY;AAAA;AAAA;AAAA;AAAA;AAAA,kBAmCZC,QAAQ,CAACC,EAAT,KAAgB,SAnCJ;AAAA;AAAA;AAAA;;AAAA,8CAoCP,IApCO;;AAAA;AAAA;AAAA,6CAsCHd,aAAa,CAACY,YAAd,EAtCG;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAApB;AA0CAG,MAAM,CAACC,OAAP,GAAiB;AAAEd,EAAAA,WAAW,EAAXA;AAAF,CAAjB","sourcesContent":["\"use strict\";\n\nimport { NativeModules, Platform } from \"react-native\";\nconst { RNNetworkInfo } = NativeModules;\n\nconst NetworkInfo = {\n  async getSSID() {\n    return await RNNetworkInfo.getSSID();\n  },\n\n  async getBSSID() {\n    return await RNNetworkInfo.getBSSID();\n  },\n\n  async getBroadcast() {\n    return await RNNetworkInfo.getBroadcast();\n  },\n\n  async getIPAddress() {\n    return await RNNetworkInfo.getIPAddress();\n  },\n\n  async getIPV4Address() {\n    const wifiIP = await RNNetworkInfo.getWIFIIPV4Address();\n    if (wifiIP && wifiIP !== '0.0.0.0') {\n      return wifiIP;\n    }\n    \n    return await RNNetworkInfo.getIPV4Address();\n  },\n\n  async getGatewayIPAddress() {\n    return await RNNetworkInfo.getGatewayIPAddress();\n  },\n\n  async getSubnet() {\n    return await RNNetworkInfo.getSubnet();\n  },\n\n  async getFrequency() {\n    if (Platform.OS !== 'android') {\n      return null;\n    }\n    return await RNNetworkInfo.getFrequency();\n  }\n};\n\nmodule.exports = { NetworkInfo };\n"]},"metadata":{},"sourceType":"module"}